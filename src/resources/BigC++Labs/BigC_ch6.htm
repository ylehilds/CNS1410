<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><HTML><HEAD>	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">	<META NAME="GENERATOR" Content="Microsoft FrontPage 4.0">	<TITLE>Big C++ Lab - Chapter 6 Classes</TITLE></HEAD><BODY><FORM ACTION="CCC_CH5_LAB.HTML" METHOD="POST" ENCTYPE="application/x-www-form-urlencoded"><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>    Chapter 6 - Classes</strong></font> </p><hr align="center"><TABLE BORDER="0">	<TR>		<TD>Your name:</TD>		<TD><INPUT TYPE="TEXT" NAME="username" SIZE="20"></TD>	</TR>	<TR>		<TD>Your email address:</TD>		<TD><INPUT TYPE="TEXT" NAME="recipientaddr" SIZE="20"></TD>	</TR>	<TR>		<TD>Your student ID number:</TD>		<TD><INPUT TYPE="TEXT" NAME="ID" SIZE="20"></TD>	</TR></TABLE><INPUT TYPE="HIDDEN" NAME="useraddr" SIZE="-1" VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN" NAME="recipientname"SIZE="-1" VALUE="yourself since this form has not been customized for your institution"> <INPUT TYPE="HIDDEN" NAME="subject"SIZE="-1" VALUE="CCC Lab8"><P><A NAME="#submit"></A>Once this form has been customized for your institution, you can use this button <INPUTTYPE="SUBMIT" VALUE="Send lab"> to send your lab work. Be sure to read the <A HREF="instructions.html">instructions</A>before starting your work.</P><P><HR ALIGN="CENTER"><H4>Lab Objectives</H4><P>To gain experience with</P><UL>	<LI>Discovering classes	<LI>Implementing your own classes	<LI>Separating class interface and implementation	<LI>Encapsulation	<LI>Object construction	<LI>Designing and implementing accessor and mutator member functions	<LI>Object-oriented design</UL><P><HR ALIGN="CENTER"><H3>R1. Discovering classes</H3><P>In each of the following examples, locate and describe those conceptually related procedures and data elementsthat can be combined into a single class.</P><PRE>/* NAME    : best_profit.cpp   PURPOSE : Calculates the best city for making a profit as a housing			 contractor.	*/#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;             int main(){   bool mdata = true;   string response = &quot;&quot;;   double avg_sale_price = 0.0;   double avg_building_cost = 0.0;   double avg_profit = 0.0;   double best_profit = 0.0;   string city = &quot;&quot;;   string best_city = &quot;&quot;;         while (mdata)   {  cout &lt;&lt; &quot;Average building cost: &quot;;      cin &gt;&gt; avg_building_cost;         cout &lt;&lt; &quot;Average sale price: &quot;;      cin &gt;&gt; avg_sale_price;      cout &lt;&lt; &quot;City : &quot;;      cin &gt;&gt; city;	  avg_profit = avg_sale_price - avg_building_cost;      if ( avg_profit&gt; best_profit)      {   best_profit = avg_profit;          best_city = city;      }        cout &lt;&lt; &quot;More data (y/n)? &quot;;      cin &gt;&gt; response;      if (response != &quot;y&quot;)       {   mdata = false;      }   }   cout &lt;&lt; &quot;The best city to be a builder in is: &quot;&lt;&lt;city &lt;&lt; &quot;\n&quot;;   return 0;}</PRE><P><TEXTAREA NAME="CCC_CH8_R1a" ROWS="20" COLS="80"></TEXTAREA></P><PRE>/*  NAME:    perk_tst.cpp    PURPOSE: Main program to record information about a properties perk test*/#include &lt;iostream&gt;#include &lt;string&gt;#include &quot;rand.h&quot;using namespace std;             const int lower_limit = 7; const int upper_limit = 120;const int lower_acceptable = 10;const int upper_acceptable = 105;void perc_dimension(int&amp; width, int&amp; length){   	width = rand_int(1,20);	length = rand_int(1,20);}void air_temp(int&amp; temperature){   	temperature = rand_int(0,120);}void perc_rate(int&amp; prate){ 	prate = rand_int(lower_limit,upper_limit);}void print_report(string site,string city, int length, int width,int prate,int temperature){   	cout &lt;&lt; &quot;Site        &quot; &lt;&lt; &quot; &quot; &lt;&lt; site &lt;&lt; &quot;\n&quot; &lt;&lt;            &quot;City        &quot; &lt;&lt; &quot; &quot; &lt;&lt; city &lt;&lt; &quot;\n&quot; &lt;&lt;            &quot;Dimensions  &quot; &lt;&lt; &quot; &quot; &lt;&lt; length &lt;&lt;&quot; X &quot;&lt;&lt;width&lt;&lt; &quot;\n&quot; &lt;&lt;            &quot;Air Temp    &quot; &lt;&lt; &quot; &quot; &lt;&lt; temperature&lt;&lt; &quot;\n&quot; &lt;&lt;			&quot;Perc Rate   &quot; &lt;&lt; &quot; &quot; &lt;&lt; prate &lt;&lt;&quot;\n&quot;;	if (prate &gt;= lower_acceptable &amp;&amp; prate &lt;= upper_acceptable)		cout &lt;&lt;&quot;Perc test is ok!\n&quot;;	else		cout &lt;&lt;&quot;Perc test is not ok!\n&quot;;}int main(){    string site = &quot;&quot;;   string city = &quot;&quot;;   int temperature = 0;   int width = 0;   int length = 0;   int percrate = 0;      cout &lt;&lt; &quot;Site ? &quot;;   cin &gt;&gt; site;   cout &lt;&lt; &quot;City ? &quot;;          cin &gt;&gt; city;   rand_seed();   perc_dimension(width,length);   air_temp(temperature);   perc_rate(percrate);   print_report(site,city,length,width,percrate,temperature);   return 0;}</PRE><P><TEXTAREA NAME="CCC_CH8_R1b" ROWS="20" COLS="80"></TEXTAREA></P><PRE>/* PURPOSE: Draw a stick figure that waves its right arm*/#include &quot;ccc_win.cpp&quot;int main(){   Point upper_torso(0.0, 5.0);    Point lower_torso(0.0, -3.0);    Point lower_left_arm(0.0, 4.0);    Point upper_left_arm(-4.0, 3.0);    Point lower_right_arm(0.0, 4.0);    Point upper_right_arm(4.0, 7.0);        Point upper_left_leg(0.0, -3.0);    Point lower_left_leg(-5.0, -9.0);        Point upper_right_leg(0.0, -3.0);    Point lower_right_leg(5.0, -9.0);        /*  wave right arm  */    while(true)                           {  upper_right_arm = Point(3.0, 8.0);       cwin.clear();       cwin &lt;&lt; Circle(Point(0.0,6.0), 1.0)            &lt;&lt; Line(upper_torso, lower_torso)                    &lt;&lt; Line(upper_left_arm, lower_left_arm)                    &lt;&lt; Line(upper_right_arm, lower_right_arm)            &lt;&lt; Line(upper_left_leg, lower_left_leg)                    &lt;&lt; Line(upper_right_leg, lower_right_leg);                     upper_right_arm = Point(4.0, 7.0);       cwin.clear();           cwin &lt;&lt; Circle(Point(0.0,6.0), 1.0)            &lt;&lt; Line(upper_torso, lower_torso)                    &lt;&lt; Line(upper_left_arm, lower_left_arm)                    &lt;&lt; Line(upper_right_arm, lower_right_arm)            &lt;&lt; Line(upper_left_leg, lower_left_leg)                    &lt;&lt; Line(upper_right_leg, lower_right_leg);    }    return 0;}    </PRE><P><TEXTAREA NAME="CCC_CH8_R1c" ROWS="20" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H3>R2. Interfaces</H3><P>An object is constructed and it's data accessed and modified only through the use of a class' member functions.These functions define a 'black box' interface to the member data. Provide a constructor and the accessors andmutators necessary to perform the identified services from within a main function using the classes you definedin the of three preceeding examples.</P><P>best_profit</P><P><TEXTAREA NAME="CCC_CH8_R2a" ROWS="12" COLS="80"></TEXTAREA></P><P>Perc Test</P><P><TEXTAREA NAME="CCC_CH8_R2b" ROWS="12" COLS="80"></TEXTAREA></P><P>Waving Stick Figure</P><P><TEXTAREA NAME="CCC_CH8_R2c" ROWS="12" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H3>R3. Encapsulation</H3><P>Consider the following class declaration.</P><PRE>class Customer{public:   Customer(string name, string address, string city, string state, string zipcode);      void increase_limit(double amount);   string get_name()  const;   string get_address() const;   string get_city()  const;   string get_state() const;   double credit_limit;private:   string name;   string address;   string city;   string state;   string zipcode;}</PRE><P><TT>class Customer </TT>fails to effectively encapsulate a data member, thereby risking a runtime error due tocorrupted data. Locate the problem(s) and propose a solution.</P><P><TEXTAREA NAME="CCC_CH8_R3a" ROWS="4" COLS="80"></TEXTAREA></P><P>One of the data members is properly encapsulated but its value cannot be detected. What is it, and what memberfunction might be added later that might use it?</P><P><TEXTAREA NAME="CCC_CH8_R3b" ROWS="4" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H3>P1. Member functions</H3><P>Suppose that the Customer class is going to be expanded to keep trackof&nbsp; total year-to-date purchases.Declaredata fields, accessors and mutators which will keep track of the total number ofsales and total sales for each instance of Customer.</P><PRE>class Customer{public:   Customer(string name, string address, string city, string state, string zipcode);      void increase_limit(double amount);   string get_name()  const;   string get_address() const;   string get_city()  const;   string get_state() const;   double credit_limit;   /*your work goes here</PRE><PRE>   */private:   string name;   string address;   string city;   string state;   string zipcode;   /* and here</PRE><PRE>   */  ;}</PRE><P>Write a program that tests the features of your Customer class.</P><P><TEXTAREA NAME="CCC_CH8_P1a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P>Suppose that management now wants to automate the customer management systemto detect when a new purchase cannot be made because the credit limit will beexceeded.&nbsp; You'll need to declare or modifydata members, constructors, accessors and mutators to expand the <TT>Customer</TT> classto return a value specifying that a new purchase would exceed the credit limit.This can be calculated by passing the purchase price into a member function,adding this to the unpaid balance and comparing it to the credit line.</P><P>Enhance your <tt>Customer</tt> class to fulfill the new requirements. Write a program that tests the new feature.Insert print statements into your code to provide a trace of your program's execution of a series of sales anda subsequent reorder.</P><P><TEXTAREA NAME="CCC_CH8_P1b" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P2. Object Construction</H3><P>In each of the following examples, provide a constructor and a <TT>print</TT> function for the specified object.</P><UL>	<LI>Postcard</UL><PRE>/* PURPOSE: Prints out generic greeting from vacation spot of choice  */Postcard::print() {   cout &lt;&lt; &quot;Dear &quot; &lt;&lt; &quot;\n&quot;;    cout &lt;&lt; to_string &lt;&lt; &quot;,\n&quot;;    cout &lt;&lt; &quot;Weather's great, Wish you were here !&quot; &lt;&lt; &quot;\n&quot;;    cout &lt;&lt; &quot;See you soon,&quot; &lt;&lt; &quot;\n&quot;;    cout &lt;&lt; from_string &lt;&lt; &quot;,\n&quot;;}</PRE><P>Write a program that constructs a postcard object and calls the <TT>print</TT> member function.</P><P><TEXTAREA NAME="CCC_CH8_P2a" ROWS="12" COLS="80">/* paste program here */</TEXTAREA><UL>	<LI>Bank Account</UL><PRE>class BankAccount/* PURPOSE: Simulate opening an new account at Grand Cayman             Savings and Loan. */            {  public:      Account::Account(string new_name, double initial_balance);                     .      .      .                        private:                                     /* randomly assigned integer */         int    account_number;                                     /* first, middle and last names                                        extracted from input name */      string last;      string middle;      string first;      double balance;}</PRE><P>Write a program that constructs an <B>Account</B> object and calls the <TT>print</TT> member function.</P><P><TEXTAREA NAME="CCC_CH8_P2b" ROWS="12" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H3>R4. Comparing non-member with member functions</H3><P>Describe each of the parameters to the following functions as one of the four combinations of implicit/explicitand reference/value parameters as described in the text.</P><P><TABLE BORDER="1" WIDTH="80%">	<TR>		<TD ALIGN="CENTER">			<P ALIGN="CENTER">Parameter type		</TD>		<TD ALIGN="CENTER">			<P ALIGN="CENTER">Explicit parameter		</TD>		<TD ALIGN="CENTER">			<P ALIGN="CENTER">Implicit parameter		</TD>	</TR>	<TR>		<TD>Reference parameter, can be updated</TD>		<TD>Use <TT>&amp;</TT></TD>		<TD>default behavior</TD>	</TR>	<TR>		<TD>Value parameter, cannot be updated</TD>		<TD>default behavior</TD>		<TD><TT>const</TT> member function</TD>	</TR></TABLE><P><BR></P><P><TABLE BORDER="0">	<TR>		<TD ALIGN="CENTER">			<P ALIGN="CENTER"><TT>double perimeter(Circle c)</TT>		</TD>		<TD><TEXTAREA NAME="CCC_CH8_R4a" ROWS="4" COLS="60"></TEXTAREA></TD>	</TR>	<TR>		<TD ALIGN="CENTER">			<P ALIGN="CENTER"><TT>double area(Circle c)</TT>		</TD>		<TD><TEXTAREA NAME="CCC_CH8_R4b" ROWS="4" COLS="60"></TEXTAREA></TD>	</TR>	<TR>		<TD ALIGN="CENTER">			<P ALIGN="CENTER"><TT>void Point::rotate(Point p, double angle)</TT>		</TD>		<TD><TEXTAREA NAME="CCC_CH8_R4c" ROWS="4" COLS="60"></TEXTAREA></TD>	</TR>	<TR>		<TD ALIGN="CENTER">			<P ALIGN="CENTER"><TT>void Message::get_start() const</TT>		</TD>		<TD><TEXTAREA NAME="CCC_CH8_R4d" ROWS="4" COLS="60"></TEXTAREA></TD>	</TR>	<TR>		<TD ALIGN="CENTER">			<P ALIGN="CENTER"><TT>void swap(int&amp; a, int&amp; b)</TT>		</TD>		<TD><TEXTAREA NAME="CCC_CH8_R4e" ROWS="4" COLS="60"></TEXTAREA></TD>	</TR>	<TR>		<TD ALIGN="CENTER">			<P ALIGN="CENTER"><TT>void Circle::move(int dx, int dy)</TT>		</TD>		<TD><TEXTAREA NAME="CCC_CH8_R4f" ROWS="4" COLS="60"></TEXTAREA></TD>	</TR>	<TR>		<TD ALIGN="CENTER">			<P ALIGN="CENTER"><TT>Point line::get_end() const</TT>		</TD>		<TD><TEXTAREA NAME="CCC_CH8_R4g" ROWS="4" COLS="60"></TEXTAREA></TD>	</TR></TABLE><HR ALIGN="CENTER"><H3>P3. Using object oriented design to build complex programs</H3><P>The objects we've used are particular instances of generally defined classes. For example, Harry Hacker is aparticular instance of the Employee class who happened to get a raise last year, whereas another employee mightnot have gotten one.</P><P>Classes in C++ can be thought of in terms of nouns and verbs, where a noun <I>is</I> something and a verb <I>does</I>something. Frequently, the noun is stored as data and the verbs are represented by member functions which accessand mutate the data. It is also not unusual for classes to contain objects of other classes as data. Several classescan also be combined into a larger class to perform more complex tasks, for example, simulating a real worldsituation.</P><P>Earlier in this lab, you developed <TT>Account</TT> and <tt>Customer</tt> classes. These are either suitableor extensible for use in many business transactions, for example a Point-of-SaleTerminal. Suppose now that you are runninga company that sells clothing and automatically debits from a banking accountonce the customer's balance reaches a predefined amount.&nbsp; Your programshould, either through a graphical user interface or character based interface,ask the user for the name of the item purchased, the quantity, the purchaseprice and the name of the customer.&nbsp; It should then check to make sure thatthe customer has adequate credit available.&nbsp; If the customer does, then thepurchase should be added to the unpaid balance.&nbsp; If the customer does nothave an adequate balance, then the unpaid balance should be debited from thecustomer's checking account.&nbsp; This will bring the unpaid balance down tozero.&nbsp; Also, there should be a trigger point at which the unpaid balancegets debited (say $1000).&nbsp;</P><H4>Finding Interfaces</H4><P>Supply the interfaces for <tt>POS</tt>, <tt>Customer</tt> and <TT>Account</TT> classes to simulatethis business situation.</P><P><TEXTAREA NAME="CCC_CH8_P3a" ROWS="60" COLS="80"></TEXTAREA><H4>Implementing Interfaces</H4><P>Implement the interfaces you designed and combine them into a simulation program. Your program should simulatetwo POS terminals.</P><P><TEXTAREA NAME="CCC_CH8_P3b" ROWS="100" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><P>Don't forget to <A HREF="#submit">send your answers</A> when you're finished.</FORM></BODY></HTML>