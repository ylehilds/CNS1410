<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><HTML><HEAD>	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows">	<TITLE>BigC++ - Chapter 15 Algorithms</TITLE></HEAD><BODY><FORM ACTION="CCC_CH15_LAB.HTML" METHOD="POST" ENCTYPE="application/x-www-form-urlencoded"><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>    Chapter 15 - Algorithms </strong></font> </p><P><HR ALIGN="CENTER"><TABLE BORDER="0">	<TR>		<TD>Your name:</TD>		<TD><INPUT TYPE="TEXT" NAME="username" SIZE="20"></TD>	</TR>	<TR>		<TD>Your email address:</TD>		<TD><INPUT TYPE="TEXT" NAME="recipientaddr" SIZE="20"></TD>	</TR>	<TR>		<TD>Your student ID number:</TD>		<TD><INPUT TYPE="TEXT" NAME="ID" SIZE="20"></TD>	</TR></TABLE><INPUT TYPE="HIDDEN" NAME="useraddr" SIZE="-1" VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN" NAME="recipientname"SIZE="-1" VALUE="yourself since this form has not been customized for your institution"> <INPUT TYPE="HIDDEN" NAME="subject"SIZE="-1" VALUE="CCC Lab15"></P><P><A NAME="#submit"></A>Once this form has been customized for your institution, you can use this button <INPUTTYPE="SUBMIT" VALUE="Send lab"> to send your lab work. Be sure to read the <A HREF="instructions.html">instructions</A>before starting your work.</P><P><HR ALIGN="CENTER"><H3>Lab Objectives</H3><P>To gain experience with</P><UL>	<LI>bubble sort, merge sort, linear and binary search algorithms	<LI>algorithms for the same task that differ widely in performance	<LI>big-Oh notation	<LI>estimating and comparing the performance of algorithms	<LI>measuring the running time of an algorithm</UL><P><HR ALIGN="CENTER"></P><P><H3>P1. Sorting</H3><P>Sorting is among the most fundamental operations commonly performed by computer. One sorting algorithm thatis often used because it is easy to program is called Bubble Sort.</P><PRE>#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;using namespace std;void swap(int&amp; x, int&amp; y){  int temp = x;        x = y;        y = temp;}void bubble_sort(vector&lt;int&gt;&amp; a){  int i;   int j;   for (i = 0 ; i &lt; a.size() ; i++)   {  /* move the largest number up */      for ( j = 0 ; j &lt; a.size() - i - 1; j++)      {  if (a[j] &gt; a[j+1] )            swap(a[j], a[j+1]);      }   }}void print(vector&lt;int&gt; a){  int i;   for (i = 0; i &lt; a.size(); i++)      cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;   cout &lt;&lt; &quot;\n&quot;;}int main(){  vector&lt;int&gt; v(4000);   int i;   for (i = 0; i &lt; v.size(); i++)      v[i] = rand_int(1, 100);      print(v);   bubble_sort(v);   print(v);   return 0;}</PRE><P>Show the steps in which the algorithm sorts the sequence {9,7,2,3,3}.</P><P><TEXTAREA NAME="CCC_CH12_P1a" ROWS="15" COLS="80"></TEXTAREA></P><P>Modify the <TT>main()</TT> function in bublsort.cpp to measure the time that it takes to sort 1000, 2000, 3000and 4000 random elements. Print out a table of the amount of time required to sort each of these sets and placethe results here:</P><P><TEXTAREA NAME="CCC_CH12_P1b" ROWS="20" COLS="80"></TEXTAREA></P><P>Modify the <TT>main()</TT> function in mergsort.cpp in the textbook to measure the time that it takes to sort1000, 2000, 3000 and 4000 random elements. Print out a table of the amount of time required to sort each of thesesets and place the results here:</P><P><TEXTAREA NAME="CCC_CH12_P1c" ROWS="10" COLS="80"></TEXTAREA></P><P>How does this compare with the previous results using bubble sort?</P><P><TEXTAREA NAME="CCC_CH12_P1d" ROWS="10" COLS="80"></TEXTAREA></P><P>How do you describe the performance of bubble sort using the big-Oh notation? Explain your analysis.</P><P><TEXTAREA NAME="CCC_CH12_P1e" ROWS="10" COLS="80"></TEXTAREA></P><P>Bubble sort can be speeded up with the following test: If during one pass through the array, no pairs of elementshad to be swapped, then the array is already sorted. Implement this improvement.</P><P><TEXTAREA NAME="CCC_CH12_P1f" ROWS="10" COLS="80">/* paste program here */</TEXTAREA></P><P>Repeat your measurements of random inputs. Feed the random inputs to both the old and the new bubble sort. Howmuch faster is the improved algorithm?</P><P><TEXTAREA NAME="CCC_CH12_P1g" ROWS="10" COLS="80"></TEXTAREA></P><P>How do you describe the performance of the improved bubble sort using the big-Oh notation? Explain your analysis.</P><P><TEXTAREA NAME="CCC_CH12_P1h" ROWS="10" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H3>P2. Searching</H3><P>A palindrome is a string that reads the same forward as backward, Some examples are:</P><PRE>                               radar                          Madam, I'm Adam                                 I                     Able was I ere I saw Elba                Go hang a salami, I'm a lasagna hog</PRE><P>Write a program that accepts a user input string and tests to see if it is a palindrome.</P><P><TEXTAREA NAME="CCC_CH12_P2a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P>Give an estimate of your program's running time for an input that is a palindrome (in terms of the length ofthe input string).</P><P><TEXTAREA NAME="CCC_CH12_P2b" ROWS="10" COLS="80"></TEXTAREA></P><P>Give an estimate of its running time for an input that is not a palindrome.</P><P><TEXTAREA NAME="CCC_CH12_P2c" ROWS="10" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H3>P3. Unique elements</H3><P>Write a function</P><PRE>bool unique_elements(vector&lt;int&gt; v)</PRE><P>that tests whether all elements in <TT>v</TT> occur exactly once. For example, if <TT>v</TT> contains the numbers4 9 4 5 6 3 1, then <TT>unique_elements</TT> returns <TT>false</TT>. If <TT>v</TT> contains the numbers 11 9 356 8 4 5, then <TT>unique_elements</TT> returns <TT>true</TT>.</P><P>Use the following algorithm:</P><PRE>   for (i = 0; i &lt; v.size(); i++)      if (v[i] occurs in v[i+1] ... v[n-1]) return false;   return true;</PRE><P>Implement the <TT>unique_elements</TT> function and a program that tests it.</P><P><TEXTAREA NAME="CCC_CH12_P3a" ROWS="10" COLS="80">/* paste program here */</TEXTAREA></P><P>In the algorithm above, we tested</P><PRE>if (v[i] occurs in v[i+1] ... v[n-1])</PRE><P>At first glance, that actually seems wrong. The correct test would appear to be</P><PRE>if (v[i] occurs in v[0] ... v[i-1] or v[i+1] ... v[n-1])</PRE><P>Explain why the first test is sufficient.</P><P><TEXTAREA NAME="CCC_CH12_P3b" ROWS="10" COLS="80"></TEXTAREA></P><P>Analyze the performance of this algorithm and estimate the running time using the Big-Oh notation.</P><P><TEXTAREA NAME="CCC_CH12_P3c" ROWS="10" COLS="80"></TEXTAREA></P><P>Describe (but do not implement) a faster algorithm for the <TT>unique_elements</TT> function.</P><P><TEXTAREA NAME="CCC_CH12_P3d" ROWS="10" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H3>P4. Binary Search</H3><P>Write a program that implements a &quot;guess the number&quot; game. That is, generate a random integer between1 and 999. Then give the user up to ten guesses. After each guess, display a &quot;Too Low&quot;, &quot;Too High&quot;or &quot;Got it!&quot; message in response.</P><P><TEXTAREA NAME="CCC_CH12_P4a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P>How is a guess-the-number game related to a binary search algrotithm?</P><P><TEXTAREA NAME="CCC_CH12_P4b" ROWS="10" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"></P><P>Don't forget to <A HREF="#submit">send your answers</A> when you're finished.</FORM></BODY></HTML>