<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><HTML><HEAD>	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">	<META NAME="GENERATOR" Content="Microsoft FrontPage 4.0">	<TITLE>Big C++ Lab - Chapter 5 Functions</TITLE></HEAD><BODY><FORM ACTION="CCC_CH5_LAB.HTML" METHOD="POST" ENCTYPE="application/x-www-form-urlencoded"><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>    Chapter 5 - Functions</strong></font> </p><hr align="center"><TABLE BORDER="0">	<TR>		<TD>Your name:</TD>		<TD><INPUT TYPE="TEXT" NAME="username" SIZE="20"></TD>	</TR>	<TR>		<TD>Your email address:</TD>		<TD><INPUT TYPE="TEXT" NAME="recipientaddr" SIZE="20"></TD>	</TR>	<TR>		<TD>Your student ID number:</TD>		<TD><INPUT TYPE="TEXT" NAME="ID" SIZE="20"></TD>	</TR></TABLE><INPUT TYPE="HIDDEN" NAME="useraddr" SIZE="-1" VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN" NAME="recipientname"SIZE="-1" VALUE="yourself since this form has not been customized for your institution"> <INPUT TYPE="HIDDEN" NAME="subject"SIZE="-1" VALUE="CCC Lab5"><P><A NAME="#submit"></A>Once this form has been customized for your institution, you can use this button <INPUTTYPE="SUBMIT" VALUE="Send lab"> to send your lab work. Be sure to read the <A HREF="instructions.html">instructions</A>before starting your work.</P><P><HR ALIGN="CENTER"><H4>Lab Objectives</H4><P>To gain experience in</P><UL>	<LI>relating a function's parameter/return value interface to its purpose	<LI>tracing the flow of a function's execution	<LI>function naming and commenting	<LI>recognizing when to use value and reference parameters	<LI>determining the scope of variables	<LI>decomposing complex tasks into simpler ones	<LI>designing functions that solve practical problems	<LI>programming recursive functions&nbsp;&nbsp;&nbsp;&nbsp;	<LI>using the assert macro to specify function preconditions</UL><P><HR ALIGN="CENTER"><H3>R1. Functions as Black Boxes</H3><P>Predictable input will result in predictable output. A function maps element(s) from a problem domain, called<I>parameter(s)</I>, into an element from a range of solutions, called the <I>return value</I>.</P><P>To treat a function as a &quot;Black Box&quot;, one simply uses it.</P><P>For instance, here's a function to compute the volume of a cylinder, say, a beer can, given the height and diameterin millimeters.</P><PRE>/* PURPOSE:   Function to compute the volume of a cylinder   RECEIVES:  height - the height in millimeters              diameter - the diameter in millimeters   RETURNS:   volume - in cubic milliliters*/ double cylinder_volume(double height, double diameter){  . . . }</PRE><P>To use this function to measure the volume of a can of Blatz Lite, just supply parameters and get its return.</P><PRE>double v = cylinder_volume(2 * can_depth, 1.5 * can_diameter);</PRE><P>Notice that you can use the function without knowing the implementation. Actually, this function is quite simple</P><PRE>double cylinder_volume(double height, double diameter){  double volume = PI * pow(diameter/2, 2) * height;   return volume;}</PRE><P>Suppose, instead of milliliters, an answer in fluid ounces is needed, say for a recipe. Use the following functions,together with <TT>double cylinder_volume(double, double) </TT>to implement a US measurement version <TT>doublecylinder_volume_oz(double, double) </TT>like this:</P><P><IMG SRC="ch5-IN2MM.JPG" WIDTH="467" HEIGHT="491" ALIGN="BOTTOM" ALT="Cylindric volume function chart" BORDER="0"HSPACE="20" VSPACE="20" ALIGN="ABSMIDDLE"></P><PRE>double inch_to_mm(double inches)/* PURPOSE:   Function to compute the volume of a cylinder   RECEIVES:  inches - value in inches to convert to millimeters   RETURNS:   the converted value   REMARKS:   1 inch = 25.4 millimeters*/{  const double MM_PER_INCH = 25.4;   return inches *  MM_PER_INCH;}double mm_cubed_to_oz(double mm3)/* PURPOSE:   Function to convert cubic millimeters to U.S. ounces   RECEIVES:  mm3 - volume in cubic millimeters   RETURNS:   volume in ounces   REMARKS:   1 fluid U.S. ounce = 29.586 milliliters*/{  const double MM_CUBED_PER_OZ = 29.586;   return value_to_convert / MM_CUBED_PER_OZ;}double cylinder_volume(double height, double diameter)/* PURPOSE:   Function to compute the volume of a cylinder   RECEIVES:  height - the height in millimeters              diameter - the diameter in millimeters   RETURNS:   volume - in cubic milliliters*/ {  double volume = PI * diameter * diameter * height / 4;    return volume;}</PRE><PRE>int cylinder_volume_oz(double height, double diameter)/* PURPOSE:   Function to compute the volume of a cylinder   RECEIVES:  height - the height in inches              diameter - the diameter in inches   RETURNS:   volume - in fl. oz.*/{</PRE><P><TEXTAREA NAME="CCC_CH5_R1a" ROWS="10" COLS="80"></TEXTAREA></P><PRE>}int main(){  double height;   double diameter;   double volume;   cout &lt;&lt; &quot;Please enter the height (in inches)&quot; &lt;&lt; &quot;\n&quot;;   cin &gt;&gt;  height;       cout &lt;&lt; &quot;Please enter the diameter (in inches)&quot; &lt;&lt; &quot;\n&quot;;   cin &gt;&gt;  diameter;       volume = cylinder_volume_oz(height, diameter);   cout &lt;&lt; &quot;The volume is &quot; &lt;&lt; volume &lt;&lt; &quot;ounces&quot; &lt;&lt; &quot;\n&quot;;   return 0;}</PRE><P><HR ALIGN="CENTER"><H3>P1. Writing Functions</H3><P>Productivity Hint 5.1 in the text suggests several enhancements to the future value function. Here is the functionfrom the text.</P><PRE>double future_value(double initial_balance, double p, int nyear)/* PURPOSE:  computes the value of an investment with compound interest   RECEIVES: initial_balance - the initial value of the investment             p-the interest rate as a percent             nyear-the number of years the investment is held   RETURNS:  the balance after nyears years   REMARKS:  Interest in compounded monthly*/         {  double b = initial_balance * pow(1 + p / (12 * 100), 12 * nyear);   return b;}int main(){   cout &lt;&lt; &quot;Please enter the initial investment: &quot;;    double initial_balance;    cin &gt;&gt; initial_balance;    cout &lt;&lt; &quot;Please enter the interest rate in percent: &quot;;    double rate;    cin &gt;&gt; rate;    cout &lt;&lt; &quot;Please enter the number of years: &quot;;    double nyears;    cin &gt;&gt; nyears;    double balance = future_value(initial_balance, rate, nyears);    cout &lt;&lt; &quot;After &quot; &lt;&lt; nyears &lt;&lt; &quot;, the initial investment of &quot; &lt;&lt; initial_balance &lt;&lt;       &quot; grows to &quot; &lt;&lt; balance &lt;&lt; &quot;\n&quot;;    return 0;}</PRE><P><HR ALIGN="CENTER"><P>Change the <TT>future_value</TT> function to compute the value of the investment when there are <TT>npayments</TT>regular interest payments per year (instead of 12 monthly payments). Supply a <TT>main</TT> function that callsyour changed function.</P><P><TEXTAREA NAME="CCC_CH5_P1a" ROWS="40" COLS="80">/* paste program here */</TEXTAREA></P><P>What is the value of a $5100 investment after 4 years at 11 percent if interest is compounded quarterly?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH5_P1b" SIZE="20"> <HR ALIGN="CENTER"><P>Change the <TT>future_value</TT> function to accept holding an investment for a fractional number of years,<TT>fyears</TT>. Supply a <TT>main</TT> function that calls your changed function.</P><P><TEXTAREA NAME="CCC_CH5_P1c" ROWS="40" COLS="80">/* paste program here */</TEXTAREA></P><P>What is the value of a $5100 investment after 5.5 years at 9 percent if interest is compounded weekly (52 weeks/year)?<INPUT TYPE="TEXT" NAME="CCC_CH5_P1d" SIZE="20"></P><H3></h3><HR ALIGN="CENTER">P2. Additional Practice Writing Functions<P>In the exercises for Chapter 4, you wrote a program to compute the discount given to a customer when purchasinghome heating oil based upon the city and the previous year's sales. Modify your program to invoke a function tocompute the discount rate. Your program should ask the user for the customer's city, number of gallons used lastyear, number of gallons purchased and the price per gallon.. It should then compute the price by multiplying thenumber of gallons by the price per gallon multiplied by the result of your function. The statement to print theresults might look like the following:</P><BLOCKQUOTE>	<P>cout &lt;&lt; &quot;Total Cost: &quot;&lt;&lt;gallons_bought * (price_per_gallon * get_disc(city,last_gal));</P></BLOCKQUOTE><P><TEXTAREA NAME="TextArea" ROWS="50" COLS="90">/* paste program here */</TEXTAREA></P><P><HR ALIGN="CENTER"><H3>R2. Function Names</H3><P>The following code can be used to test a text mode function's interface. It's called a test harness, becauseany function can be used in it, simply by replacing <TT>foo() </TT>with the new function call and the desired parametersand returns.</P><PRE>double foo(int n)/* PURPOSE:  Test harness for calls to console programs   RECEIVES: Programmer specified parameter   RETURNS:  Programmer specified return value    REMARKS:  Used to test parameter and return passing.*/{  cout &lt;&lt; &quot;Got to &quot; &lt;&lt; &quot;foo&quot; &lt;&lt; &quot; with parameter &quot; &lt;&lt; n &lt;&lt; &quot;\n&quot;;   return n * 0.1;               /* to simulate function activity */}int main(){  int give = 3;                /* any test value can be entered here */   double get;   get = foo(give);   cout &lt;&lt; &quot;Returned from &quot; &lt;&lt; &quot;foo&quot; &lt;&lt; &quot; with &quot; &lt;&lt; get &lt;&lt; &quot;\n&quot;;   return 0;}</PRE><P>Why are the following functions badly named? Try using them in the test harness. What happened? What names wouldbe better?</P><UL>	<LI><TT>double 4toTheN(int n)</TT> <BR>	/* compute a power of 4 */	<P><TEXTAREA NAME="CCC_CH5_R2a" ROWS="5" COLS="80"></TEXTAREA></P>	<LI><TT>double(int max_value)</TT> <BR>	/* generate a random floating point number between 0 and max_value */	<P><TEXTAREA NAME="CCC_CH5_R2b" ROWS="5" COLS="80"></TEXTAREA></P>	<LI><TT>double rt(int x)</TT> <BR>	/* computes the square root */	<P><TEXTAREA NAME="CCC_CH5_R2c" ROWS="5" COLS="80"></TEXTAREA></P></UL><P><HR ALIGN="CENTER"><H3>R3. Function Comments</H3><P>Sooner or later, you'll encounter cryptically named and uncommented work like the following.</P><PRE>bool cn(Employee e1, Employee e2){  return e1.get_name() == e2.get_name();}bool cs(Employee e1, Employee f){  return (e1.get_city() == f.get_city() and e1.get_state() = f.get_state());}bool c4dup(Employee joe, Employee mary){  return  cn(hank, mable) and cs(hank, mable);}int main(){  Employee jerry;      Employee jenny;   if(c4dup(jerry, jenny))      cout &lt;&lt; &quot;Same&quot; &lt;&lt; &quot;\n&quot;;   else      cout &lt;&lt; &quot;Different&quot; &lt;&lt; &quot;\n&quot;;   return 0;}</PRE><P>What do these functions do ? <BR><TEXTAREA NAME="CCC_CH5_R3a" ROWS="3" COLS="80"></TEXTAREA></P><P>Rewrite them with comments and more descriptive function and parameter names. Use:</P><PRE>/* PURPOSE:   RECEIVES:   RETURNS:*/  </PRE><P><TEXTAREA NAME="CCC_CH5_R3b" ROWS="30" COLS="80">/*paste your code here*/</TEXTAREA></P><P><HR ALIGN="CENTER"><H3>P3. Return Values</H3><P>In functions with more complicated branching of control, one way to insure a reasonable return value is to gathertogether all the possibilities and issue only one <TT>return</TT> statement from the very end of the block statement.Rewrite the <TT>points_of_compass</TT> function as follows:</P><OL>	<LI>Introduce an additional variable <TT>string direction_string</TT>	<LI>Be more clever about the logic--first compute the major direction (north, east, south, west), then append an	east or west if necessary	<LI>Return the <TT>direction_string</TT> from the end of the function only</OL><PRE>string points_of_compass(int degrees)/* PURPOSE:   Convert a numeric compass position to it's verbal equivalent   RECEIVES:  degrees - the compass needle angle in degrees   RETURNS:   the value as a compass direction (&quot;N&quot;, &quot;NE&quot;, ...) */ {  degrees = degrees % 360;   double octant = degrees / 45.0 - 0.5;      if (octant &gt;= 7)      return &quot;North West&quot;;   else if (octant &gt;= 6)      return &quot;West&quot;;   else if (octant &gt;= 5)      return &quot;South West&quot;;   else if (octant &gt;= 4)      return &quot;South&quot;;   else if (octant &gt;= 3)      return &quot;South East&quot;;   else if (octant &gt;= 2)      return &quot;East&quot;;   else if (octant &gt;= 1)      return &quot;North East&quot;;   else if (octant &gt;= 0)      return &quot;North&quot;;   else      return &quot;North West&quot;;}int main(){  int degrees;      cout &lt;&lt; &quot;Please enter the compass heading (in degrees): &quot;;   cin &gt;&gt; degrees;   string direction = points_of_compass(degrees);   cout &lt;&lt; &quot;You are heading &quot; &lt;&lt; direction &lt;&lt; &quot;\n&quot;;   return 0;}</PRE><P><TEXTAREA NAME="CCC_CH5_P2a" ROWS="50" COLS="80">/* paste program here */</TEXTAREA></P><P><HR ALIGN="CENTER"><H3>R4. Parameters</H3><P>Consider the following functions:</P><PRE>   string propercase(string z);   void swapit(int&amp; a, double&amp; b);   double cylinder_height(int h, double r);</PRE><P>and these variables:</P><PRE>   string greeting = Hello!&quot;   int f;   double g;   double x;</PRE><P>What is wrong with each of the following function calls ?</P><UL>	<LI><TT>greeting = propercase(f);</TT></UL><P><TEXTAREA NAME="CCC_CH5_R4a" ROWS="3" COLS="80"></TEXTAREA></P><UL>	<LI><TT>double_swap_it(f, g)</TT></UL><P><TEXTAREA NAME="CCC_CH5_R4b" ROWS="3" COLS="80"></TEXTAREA></P><UL>	<LI><TT>greeting = cylinder_height(f,g)</TT></UL><P><TEXTAREA NAME="CCC_CH5_R4c" ROWS="3" COLS="80"></TEXTAREA></P><P><HR ALIGN="CENTER"><H3>Side Effects, Procedures and Reference Parameters</H3><P>Procedures differ from functions since they generally do not have a return value. Sometimes, a procedure mayhave a return value but the generation of a return value is not the main purpose of the procedure. Several conditionsmay cause a function to not return a value:</P><UL>	<LI>nothing needs to be returned	<PRE>void print_result(string out_string)/* PURPOSE:   print a string to the screen   REMARKS:   Procedure doesn't need to return confirmation of successful print*/ {   cout &lt;&lt; &quot;The result is &quot; &lt;&lt; out_string &lt;&lt; endl;}</PRE>	<LI>more than one thing is changed, but <TT>return</TT> could only handle one of them:	<PRE>void reset(double&amp; level, Time&amp; starttime, string&amp; name, int&amp; index)/* PURPOSE:   Reset variables to default values   RECEIVES:  level - the level to be reset              starttime - the time to be reset              name - the name to be reset              index - the index to be reset   REMARKS:   All parameters are passed by reference to enable changing them in place*/ {  level = 0.0;   starttime = Time();   name = &quot;&quot;;   index++;}</PRE>	<LI>the object to be changed is in the global scope	<PRE>/* PURPOSE:   Set an employee's salary   USES:      Global top_salary   REMARKS:   top_salary keeps the maximum salary of all seen by set_salary*/ void set_salary(Employee employee, double new_salary){  if (new_salary &gt; top_salary)      top_salary = new_salary;   employee.set_salary(new_salary);   }</PRE></UL><P><HR ALIGN="CENTER"><H4>R5. Tracing Reference Parameters</H4><P>The street gambler's game of 3-Card Monte is deceptively simple. Three cards are placed face down on a table.One of the three is the Queen of Spades, and you are shown where it is. The dealer then re-arranges the cards,and asks &quot;Where is the Queen?&quot;</P><PRE>void swap(string&amp; a, string&amp; b){  string temp;   temp = a;   a = b;   b = temp;} int three_card_monte(string card1, string card2, string card3){  swap(card1, card2);   swap(card2, card3);   swap(card1, card3);      if (card1 == &quot;queen&quot;)      return 1;   else if (card2 == &quot;queen&quot;)      return 2;   else /* (card3 == &quot;queen&quot;) */      return 3;}int main(){  string first = &quot;queen&quot;;   string second = &quot;king&quot;;   string third = &quot;ace&quot;;   int guess;   int location;            location = three_card_monte(first, second, third);       cout &lt;&lt; &quot;Where's the Queen ( 1, 2 or 3 ) ? &quot;;   cin &gt;&gt; guess;   if (guess == location)      cout &lt;&lt; &quot;Congratulations!&quot; &lt;&lt; &quot;\n&quot;;   else      cout &lt;&lt; &quot;Better luck next time, it was number &quot; &lt;&lt; location &lt;&lt; &quot;\n&quot;;             return 0;}</PRE><P>What are the values of the parameters to <TT>three_card_monte(card1, card2, card3)</TT></P><P><TEXTAREA NAME="CCC_CH5_R5a" ROWS="3" COLS="20"></TEXTAREA></P><P>To what variable do <TT>a</TT> and <TT>b</TT> refer in the first, second and third calls to <TT>swap(a,b)</TT></P><P><TABLE BORDER="0">	<TR>		<TD>call</TD>		<TD>a</TD>		<TD>b</TD>	</TR>	<TR>		<TD>1</TD>		<TD><INPUT TYPE="TEXT" NAME="CCC_CH5_R5b" SIZE="20"></TD>		<TD><INPUT TYPE="TEXT" NAME="CCC_CH5_R5c" SIZE="20"></TD>	</TR>	<TR>		<TD>2</TD>		<TD><INPUT TYPE="TEXT" NAME="CCC_CH5_R5d" SIZE="20"></TD>		<TD><INPUT TYPE="TEXT" NAME="CCC_CH5_R5e" SIZE="20"></TD>	</TR>	<TR>		<TD>3</TD>		<TD><INPUT TYPE="TEXT" NAME="CCC_CH5_R5f" SIZE="20"></TD>		<TD><INPUT TYPE="TEXT" NAME="CCC_CH5_R5g" SIZE="20"></TD>	</TR></TABLE><HR ALIGN="CENTER"><H4>P4. Programming with Reference Parameters</H4><P>Write a function <TT>sort3d()</TT> that sorts three integers in decreasing order. You may use:</P><PRE>void sort2d(int&amp; a, int&amp;b){   int temp;    if (a &lt; b)    {  temp = b;       a = b;       b = temp;    }}    </PRE><P><TEXTAREA NAME="CCC_CH5_P3a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P><HR ALIGN="CENTER"><H3>R6. Variable scoping</H3><P>Generally, we want to encourage you to define a variable when you first need it, but you have to pay attentionto the scope. Find what's wrong with this function's variable scoping, then fix it.</P><PRE>/* PURPOSE:   Select the maximum of three integer values   RECEIVES:  ints i, j, k*/ int maximum(int i, int j, int k){  if (i &gt; j)   {  int a;      a = i;   }                 else   {   a = j;   }            if (k &gt; a)   {   return k;   }   else   {   return a;   }}</PRE><P><TEXTAREA NAME="CCC_CH5_R6a" ROWS="20" COLS="80"></TEXTAREA></P><P><HR ALIGN="CENTER"><H4>P5. Eliminating Global Variables</H4><P>Global variables may &quot;work&quot;, but the advantages they offer are outweighed by the confusion they cancause. Since all functions can set a global variable, it is often difficult to find the guilty party if the globalvariable is set to the wrong value.</P><PRE>int maximum;void set_max(int a)/* PURPOSE:   Updates maximum if parameter is larger    RECEIVES:  a - the value to compare against maximum   REMARKS:   Uses global int maximum  */{  if (maximum &lt; a)    {   maximum = a;   }}void max3(int i, int j, int k){  maximum = i;   set_max(j);   set_max(k);   return maximum;}int main(){   cout &lt;&lt; &quot;Please enter the first integer: &quot;;    cin &gt;&gt; i;    cout &lt;&lt; &quot;Please enter the second integer: &quot;;    cin &gt;&gt; j;    cout &lt;&lt; &quot;Please enter the third integer: &quot;;    cin &gt;&gt; k;    maximum = max3(i, j, k);    cout &lt;&lt; &quot;The maximum is &quot; &lt;&lt; maximum &lt;&lt; &quot;\n&quot;    return 0;}</PRE><P>Re-write <TT>max3() </TT>to avoid the use of global variables, and to preserve the logic of the function.</P><P><TEXTAREA NAME="CCC_CH5_P4a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P><HR ALIGN="CENTER"><H3>P6. Stepwise refinement</H3><P>A call-tree diagram can help organize a large number of related functions. Consider drawing a house like thisone using the code library's graphics functions.</P><P><IMG SRC="ch5-HOUSE.JPG" WIDTH="482" HEIGHT="434" ALIGN="BOTTOM" ALT="Cylindric volume function chart" BORDER="0"HSPACE="20" VSPACE="20" ALIGN="ABSMIDDLE"></P><P>It can be done by organizing calls like these:</P><PRE>draw_house()draw_window()draw_front()draw_roof()draw_door()</PRE><P>into a call tree like this</P><PRE>draw_house    |     +---------- draw_front    |               |    |               +----------- draw_window (3 times)    |               |    |               +----------- draw_door    |    +---------- draw_roof</PRE><P>Write a program that implements these functions to draw a house. (Hint: <TT>draw_window</TT> needs a parameterto specify the location of the window.)</P><P><TEXTAREA NAME="CCC_CH5_P5a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P><HR ALIGN="CENTER"><H3>R7. Walkthroughs</H3><P>Check the arguments accepted by <TT>three_card_monte()</TT>. What happens if one of them is empty, e.g. <TT>three_card_monte(&quot;queen&quot;,&quot;king&quot;,&quot;&quot;)</TT>?</P><P><TEXTAREA NAME="CCC_CH5_R7a" ROWS="8" COLS="80"></TEXTAREA></P><P>What changes to the function would you recommend ?</P><P><TEXTAREA NAME="CCC_CH5_R7b" ROWS="8" COLS="80"></TEXTAREA></P><P><HR ALIGN="CENTER"><H3>P7. Recursion</H3><P>Consider a function <TT>int digits(int)</TT> which finds the number of digits needed to represent an integer.For example, <TT>digits(125)</TT> is 3 because 125 has three digits (1, 2, and 5). The algorithm is defined as:</P><P ALIGN="CENTER">if n &lt; 10, then digits(n) equals 1. Else, digits(n) equals digits(n / 10) + 1.</P><P>(Why? If n is less than 10, one digit is required. Otherwise, n requires one more digit than n/10.)</P><P>For example, if called as <TT>int num_digits = digits(1457)</TT>, the following trace results:</P><PRE>digits(1457)= digits(145) + 1= digits(14) + 1 + 1= digits(1) + 1 + 1 + 1= 1 + 1 + 1 + 1</PRE><P>Do a trace of <TT>digits(32767)</TT><BR><TEXTAREA NAME="CCC_CH5_P6a" ROWS="8" COLS="80"></TEXTAREA></P><P>Write <TT>int digits(int)</TT> to be called by the following <TT>main()</TT>:</P><PRE>int main(){  int test_value;   cout &lt;&lt; &quot;Please enter a number &quot; &lt;&lt; &quot;\n&quot;;   cin &gt;&gt;  test_value;         int ndigits = digits(test_value);      cout &lt;&lt; &quot;You need &quot; &lt;&lt; ndigits &lt;&lt; &quot; bits to represent &quot; &lt;&lt; test_value &lt;&lt; &quot; in decimal\n&quot;;   return 0;}</PRE><H3><TEXTAREA NAME="CCC_CH5_P6b" ROWS="8" COLS="80">/* paste program here */</TEXTAREA> </h3><HR ALIGN="CENTER">R8. Preconditions<P>The following program computes the percentage difference between last year's raise and this year's raise.</P><PRE>#include &lt;iostream&gt;using namespace std;double compute_change(double ns, double ls, double os){	return (((ns-ls)/(ls-os))*100);}int main(){	double new_sal, old_sal, last_sal;	cout &lt;&lt; &quot;New salary: &quot;;	cin &gt;&gt;new_sal;	cout &lt;&lt; &quot;\nLast year's salary: &quot;;	cin &gt;&gt;last_sal;	cout &lt;&lt;&quot;\nPrevious year's salary: &quot;;	cin &gt;&gt; old_sal;	cout &lt;&lt;compute_change(new_sal,last_sal,old_sal);	return 0;}</PRE><P>Rewrite the compute_change function using two different methods to insure that the denominator (last year'ssalary - previous year's salary) is not equal to zero.<TEXTAREA NAME="TextArea54" ROWS="17" COLS="90">/*insert your code here*/</TEXTAREA></P><P><TEXTAREA NAME="TextArea55" ROWS="17" COLS="90">/*insert your code here*/</TEXTAREA></P><P><HR ALIGN="CENTER"><P>Don't forget to <A HREF="#submit">send your answers</A> when you're finished.</FORM></BODY></HTML>