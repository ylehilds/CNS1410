<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><HTML><HEAD>	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1"><META http-equiv=Content-Type content="text/html; charset=windows-1252">	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows">	<TITLE>Big C++ Lab - Chapter 14 Recursion</TITLE></HEAD><BODY><FORM ACTION="CCC_CH14_LAB.HTML" METHOD="POST" ENCTYPE="application/x-www-form-urlencoded"><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>    Chapter 14 - Recursion</strong></font> </p><P><HR ALIGN="CENTER"><TABLE BORDER="0"><TBODY>  								<TR>		<TD>Your name:</TD>		<TD><INPUT TYPE="TEXT" NAME="username" SIZE="25"></TD>	</TR>	<TR>		<TD>Your email address:</TD>		<TD><INPUT TYPE="TEXT" NAME="recipientaddr" SIZE="25"></TD>	</TR>	<TR>		<TD>Your student ID number:</TD>		<TD><INPUT TYPE="TEXT" NAME="ID" SIZE="25"></TD>	</TR></TBODY></TABLE><INPUT TYPE="HIDDEN" NAME="useraddr" SIZE="-1" VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN" NAME="recipientname"SIZE="-1" VALUE="yourself since this form has not been customized for your institution"> <INPUT TYPE="HIDDEN" NAME="subject"SIZE="-1" VALUE="CCC Lab14"></P><P><A NAME="#submit"></A>Once this form has been customized for your institution, you can use this button <INPUTTYPE="SUBMIT" VALUE="Send lab"> to send your lab work. Be sure to read the <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/instructions.html">instructions</A>before starting your work.</P><P><HR ALIGN="CENTER"><H3>Lab Objectives</H3><P>To gain experience with</P><UL>	<LI>the method of recursion	<LI>analyzing and creating solutions to problems using recursion	<LI>thinking recursively	<LI>recursive helper functions</UL><H3><HR ALIGN="CENTER">P1. A Simple Recursion Example</H3><P>Consider a function <TT>int digits(int)</TT> which finds the number of digits needed to represent an integer.For example, <TT>digits(125)</TT> is 3 because 125 has three digits (1, 2, and 5). The algorithm is defined as:</P><P ALIGN="CENTER">if n &lt; 10, then digits(n) equals 1. Else, digits(n) equals digits(n / 10) + 1.</P><P>(Why? If n is less than 10, one digit is required. Otherwise, n requires one more digit than n/10.)</P><P>For example, if called as <TT>int num_digits = digits(1457)</TT>, the following trace results:</P><PRE>digits(1457)= digits(145) + 1= digits(14) + 1 + 1= digits(1) + 1 + 1 + 1= 1 + 1 + 1 + 1</PRE><P>Do a trace of <TT>digits(32767)</TT><BR><TEXTAREA NAME="CCC_CH5_P6a" ROWS="8" COLS="80"></TEXTAREA></P><P>Write <TT>int digits(int)</TT> to be called by the following <TT>main()</TT>:</P><PRE>int main(){  int test_value;   cout &lt;&lt; &quot;Please enter a number &quot; &lt;&lt; &quot;\n&quot;;   cin &gt;&gt;  test_value;         int ndigits = digits(test_value);      cout &lt;&lt; &quot;You need &quot; &lt;&lt; ndigits &lt;&lt; &quot; digits to represent &quot; &lt;&lt; test_value &lt;&lt; &quot; in decimal\n&quot;;   return 0;}</PRE><P><TEXTAREA NAME="CCC_CH5_P6b" ROWS="8" COLS="80">/* paste program here */</TEXTAREA></P><H3><HR ALIGN="CENTER">R1. Computing the Greatest Common Divisor (GCD): The Euclidean Algorithm</H3><P>In order to illustrate recursion in this lab, we will use an example from mathematics: the greatest common divisor,or GCD. The greates common divisor is defined as the largest divisor of a pair of integers. For example, if wetry to find all of the common divisors of 30 and 45, we get the following:</P><P><TABLE BORDER="0" WIDTH="23%">	<TR>		<TD WIDTH="49%">30/3 = 10</TD>		<TD WIDTH="51%">45/3 = 15</TD>	</TR>	<TR>		<TD WIDTH="49%">30/5 = 6</TD>		<TD WIDTH="51%">45/5 = 9</TD>	</TR>	<TR>		<TD WIDTH="49%">30/15 = 2</TD>		<TD WIDTH="51%">45/15 = 3</TD>	</TR></TABLE>Since we cannot divide any further, the greatest common divisor is 15.<BR>To make sure that you understand the greatest common divisor, please complete the following table:</P><P><TABLE BORDER="1" WIDTH="45%">	<TR>		<TD WIDTH="24%">			<P ALIGN="CENTER"><B>X</B>		</TD>		<TD WIDTH="23%">			<P ALIGN="CENTER"><B>Y</B>		</TD>		<TD WIDTH="53%">			<P ALIGN="CENTER"><B>GCD(X,Y)</B>		</TD>	</TR>	<TR>		<TD WIDTH="24%">25</TD>		<TD WIDTH="23%">55</TD>		<TD WIDTH="53%"><INPUT TYPE="TEXT" NAME="Field" SIZE="25"></TD>	</TR>	<TR>		<TD WIDTH="24%">300</TD>		<TD WIDTH="23%">175</TD>		<TD WIDTH="53%"><INPUT TYPE="TEXT" NAME="Field" SIZE="25"></TD>	</TR>	<TR>		<TD WIDTH="24%">160</TD>		<TD WIDTH="23%">80</TD>		<TD WIDTH="53%"><INPUT TYPE="TEXT" NAME="Field" SIZE="25"></TD>	</TR>	<TR>		<TD WIDTH="24%">459</TD>		<TD WIDTH="23%">76</TD>		<TD WIDTH="53%"><INPUT TYPE="TEXT" NAME="Field" SIZE="25"></TD>	</TR>	<TR>		<TD WIDTH="24%">456</TD>		<TD WIDTH="23%">76</TD>		<TD WIDTH="53%"><INPUT TYPE="TEXT" NAME="Field" SIZE="25"></TD>	</TR></TABLE></P><P>The Euclidean Algorithm states the following, given that a and b are positive integers that we wish to findthe gcd of:</P><P><TABLE BORDER="0" WIDTH="38%">	<TR>		<TD WIDTH="50%">a=q<SUB>1</SUB>b + r<SUB>1 </SUB>,</TD>		<TD WIDTH="50%">0&lt;r<SUB>1</SUB>&lt;b</TD>	</TR>	<TR>		<TD WIDTH="50%">b=q<SUB>2</SUB>r1 + r<SUB>2</SUB>,</TD>		<TD WIDTH="50%">0&lt;r<SUB>2</SUB>&lt;r<SUB>1</SUB></TD>	</TR>	<TR>		<TD WIDTH="50%">r<SUB>3</SUB>=q<SUB>3</SUB>r<SUB>2</SUB> + r<SUB>3 </SUB>,</TD>		<TD WIDTH="50%">0&lt;r<SUB>3</SUB>&lt;r<SUB>2</SUB></TD>	</TR>	<TR>		<TD WIDTH="50%">. . . . . . . . . . . . . . . . . . .</TD>		<TD WIDTH="50%">&nbsp;</TD>	</TR>	<TR>		<TD WIDTH="50%">r<SUB>i</SUB>=q<SUB>i+2</SUB>r<SUB>i+1</SUB> + r<SUB>i+2</SUB> ,</TD>		<TD WIDTH="50%">0&lt;r<SUB>i+2</SUB>&lt;r<SUB>i+1</SUB></TD>	</TR>	<TR>		<TD WIDTH="50%">. . . . . . . . . . . . . . . . . . .</TD>		<TD WIDTH="50%">&nbsp;</TD>	</TR>	<TR>		<TD WIDTH="50%">r<SUB>k-2 </SUB>=q<SUB>k</SUB>r<SUB>k-1</SUB> + r<SUB>k</SUB> ,</TD>		<TD WIDTH="50%">0&lt;r<SUB>k</SUB>&lt;r<SUB>k-1</SUB></TD>	</TR>	<TR>		<TD WIDTH="50%">r<SUB>k-1 = </SUB>q<SUB>k+1</SUB>r<SUB>k</SUB> ,</TD>		<TD WIDTH="50%">&nbsp;</TD>	</TR></TABLE></P><P>So, r<SUB>k</SUB> , the last non-zero remainder is the GCD.</P><P>Let's look at an example: find GCD(412,36)</P><P><TABLE BORDER="0" WIDTH="35%">	<TR>		<TD WIDTH="50%">412 = 11(36) + 16</TD>		<TD WIDTH="50%">0 &lt; 16 &lt; 36</TD>	</TR>	<TR>		<TD WIDTH="50%">36 = 2(16) + 4</TD>		<TD WIDTH="50%">0 &lt; 4 &lt; 16</TD>	</TR>	<TR>		<TD WIDTH="50%">16 = 4(4) + 0</TD>		<TD WIDTH="50%">&nbsp;</TD>	</TR></TABLE>Since 4 is the last non-zero remainder, GCD(412,36) = 4.</P><P>For practice, compute GCD(250,111) using the steps shown above.</P><P><TEXTAREA NAME="TextArea" ROWS="27" COLS="104">*paste your answer here</TEXTAREA></P><P><HR ALIGN="CENTER"></P><H3>P2. Non-Recursive Euclidean GCD</H3><P>Now that you know how the Euclidean Algorithm for computing the gcd works, implement this by creating a classwhich has two integers as data elements a constructor and a member function to compute the gcd. Please make surethat you test to make sure that the integers are positive. You can use the modulus (%) operator to calculate theremainder. Your program should prompt the user for two integers and then return the GCD.</P><P><TEXTAREA NAME="TextArea" ROWS="27" COLS="104">/*paste your code here</TEXTAREA></P><H3><HR ALIGN="CENTER">R2. Thinking Recursively</H3><P>Now that you have coded the Euclidean GCD Algorithm non-recursively, let's once again look at the algorithm.Your textbook discusses some steps for reducing a problem to a simpler solution in order to implement it recursively..Let's take our example from above gcd(412,36):</P><P><TABLE BORDER="0" WIDTH="35%">	<TR>		<TD WIDTH="50%">412 = 11(36) + 16</TD>		<TD WIDTH="48%">0 &lt; 16 &lt; 36</TD>		<TD WIDTH="2%">(1)</TD>	</TR>	<TR>		<TD WIDTH="50%">36 = 2(16) + 4</TD>		<TD WIDTH="48%">0 &lt; 4 &lt; 16</TD>		<TD WIDTH="2%">(2)</TD>	</TR>	<TR>		<TD WIDTH="50%">16 = 4(4) + 0</TD>		<TD WIDTH="48%">&nbsp;</TD>		<TD WIDTH="2%">(3)</TD>	</TR></TABLE></P><P>Since 4 is the last non-zero remainder, the Euclidean algorithm tells us that this is the gcd. But let's lookagain at equation 2: if we just use equations 2 and 3, we will find that the gcd(36,16) = 4. Similarly, equation3 used alone tells us that gcd(16,4) = 4 because 4 divides 16. So, we can the say that:</P><P>gcd(412,36)=gcd(36,16)=gcd(16,4)</P><P>We can see that:</P><BLOCKQUOTE>	<P>16 = 412 mod 36 and 4 = 36 mod 16</P></BLOCKQUOTE><P>Therefore:</P><BLOCKQUOTE>	<P>gcd(412,36) = gcd(36,412 mod 36) = gcd(412 mod 36,36 mod (412 mod 36))</P></BLOCKQUOTE><P>We can therefore write out the steps for representing this as a recursive function:</P><P>given that x and y are positive integers</P><P>1. if x mod y = 0, then gcd(x,y) = y</P><P>2. if x does not divide by y evenly, then</P><BLOCKQUOTE>	<P>a. set x = y</P>	<P>b.set y = x mod y, where the value of x is the old value of x</P>	<P>c. return to step 1</P></BLOCKQUOTE><P>Let's walk through the example gcd(412,36)</P><P>1. 412 mod 36 != 0, goto step 2</P><P>2a. x = 36</P><P>2b. y = 412 mod 36 = 16</P><P>2nd iteration:</P><P>1. 36 mod 16 != 0</P><P>2a. x = 16</P><P>2b. y = 4</P><P>3rd iteration</P><P>1. 16 mod 4 = 0 , return 4</P><P>As you can see, we have broken the problem down into simpler problems in order to solve it.</P><H3><HR ALIGN="CENTER">P3. Recursive Implementation of Euclidean GCD Algorithm</H3><P>Now that we have gone through the recursive implementation of this algorithm, modify the class that you createdin P2 to implement the gcd member function as a recursive function.</P><P><TEXTAREA NAME="TextArea" ROWS="27" COLS="104">/*paste your code here</TEXTAREA></P><H3><HR ALIGN="CENTER">R3. Efficiency of Recursion</H3><P>Which implementation of the Euclidean Algorithm do you think is more efficient?</P><P><INPUT TYPE="TEXT" NAME="Field25" SIZE="71"></P><P>Why?</P><P><TEXTAREA NAME="TextArea26" ROWS="23" COLS="107"></TEXTAREA></P><H3><HR ALIGN="CENTER">P4. Efficiency</H3><P>Write a program to trace your recursive implementation of GCD.</P><P><TEXTAREA NAME="TextArea26" ROWS="23" COLS="107">/*paste your code here</TEXTAREA></P><P>Run this program. Do you see any place where there could be some inefficiencies in your code? Do you think thatthe non-recursive (iterative) version is faster?</P><P><TEXTAREA NAME="TextArea26" ROWS="23" COLS="107"></TEXTAREA></P><P><HR ALIGN="CENTER"></P><P>Don't forget to <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch10.html#submit">send youranswers</A> when you're finished.</FORM></BODY></HTML>