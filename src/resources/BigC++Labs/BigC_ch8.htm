<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><HTML><HEAD>	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1"><META http-equiv=Content-Type content="text/html; charset=windows-1252">	<META NAME="GENERATOR" Content="Microsoft FrontPage 4.0">	<TITLE>Big C++ Lab - Chapter 8 Debugging</TITLE></HEAD><BODY><FORM ACTION="CCC_CH7_LAB.HTML" METHOD="POST" ENCTYPE="application/x-www-form-urlencoded"><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>    Chapter 8 - Debugging </strong></font> </p><hr align="center"><TABLE BORDER="0"><TBODY>  		<TR>		<TD>Your name:</TD>		<TD><INPUT TYPE="TEXT" NAME="username" SIZE="25"></TD>	</TR>	<TR>		<TD>Your email address:</TD>		<TD><INPUT TYPE="TEXT" NAME="recipientaddr" SIZE="25"></TD>	</TR>	<TR>		<TD>Your student ID number:</TD>		<TD><INPUT TYPE="TEXT" NAME="ID" SIZE="25"></TD>	</TR></TBODY></TABLE><INPUT TYPE="HIDDEN" NAME="useraddr" SIZE="-1" VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN" NAME="recipientname"SIZE="-1" VALUE="yourself since this form has not been customized for your institution"> <INPUT TYPE="HIDDEN" NAME="subject"SIZE="-1" VALUE="CCC Lab7"><P><A NAME="#submit"></A>Once this form has been customized for your institution, you can use this button <INPUTTYPE="SUBMIT" VALUE="Send lab"> to send your lab work. Be sure to read the <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/instructions.html">instructions</A>before starting your work.</P><P><HR ALIGN="CENTER"><P>We would like to thank Dr. Leslie Foster for contributing the &quot;Pascal Triangle&quot; debugging exercise.</P><P><HR ALIGN="CENTER"><H4>Lab Objectives</H4><P>To gain experience with</P><UL>	<LI>designing harnesses for testing components of your programs in isolation	<LI>the principles of test case selection and evaluation	<LI>using assertions to document program assumptions	<LI>the debugger	<LI>strategies for effective debugging</UL><H4>P1. Unit Tests</H4><P>Testing a function for run time errors in context of an ongoing project is always difficult. The source of anerror may well be obscured by other functions, there could be more than one error, it might arise under unusualcircumstances or even appear to go away. Testing a new function in isolation, before adding it to a project givesyou an excellent opportunity to locate errors before they become lost in a broken project.</P><P>Testing in isolation is called <I>unit testing</I>. It requires a <I>test harness</I>, that is, a function <TT>main()</TT>that calls your new function with parameters obtained from 1) user input, 2) a file or 3) a function that generatesparameter values.</P><P>Write two test harnesses for the following function. The first test harness takes test values from prompteduser input. The second test harness generates test cases randomly.</P><PRE>#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int find_first(string s, string sub)/* PURPOSE:   Search a string for a substring   RECEIVES:  sub - the string to look for              s - the string to look in   RETURNS:   if found, the integer position of sub in s              else, -1    */ {  int i = 0;    while (sub.length() + i &lt;= s.length())   {  if(s.substr(i, sub.length()) == sub)         return i;      else           i++;   }   return -1;}int main(){  string search_for;   string search_in;   bool done = false;       while (not done)   {  /*           Your work goes here           (get test cases consisting of two strings for find_first())       */    }   return 0;}</PRE><UL>	<LI>Test harness having user input test cases. <BR>	<TEXTAREA NAME="CCC_CH7_P1a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA>	<LI>Test harness having randomly generated test cases.	<P>When generating test cases randomly, be sure to include both positive and negative tests. That is, use 1) a	random substring taken from the teststring and 2) some other random string.</P>	<P>Hint: We have no function to generate a completely random string, but you can write one! Make a string of the	26 lowercase letters, then extract single-character length substrings from it at positions generated by <TT>random_int(0,	25)</TT> and concatenate them.</P>	<TEXTAREA NAME="CCC_CH7_P1b" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></UL><P>It is of course tedious to type in lots of test data every time you find a bug in your code. How can you reducethat workload ?</P><P><TEXTAREA NAME="CCC_CH7_P1c" ROWS="8" COLS="80"></TEXTAREA></P><P>Did you think of boundary cases? What would be boundary cases in this example?</P><P><TEXTAREA NAME="CCC_CH7_P1d" ROWS="8" COLS="80"></TEXTAREA><H4>R1. Finding a bug</H4><P>Now run the following function through two test procedures (manual and automatic test case generation)</P><PRE>#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int find_last(string s, string sub)/* PURPOSE:  Searches for last occurrence of one string in another   RECEIVES: s - the string to search in             sub - the string to search for   RETURNS:  if found, the integer position of sub in s             else, 0    */   {  string save_s = s;    while (sub.length() &lt;= s.length())   {  if(s.substr((s.length() - 1 - sub.length() - 1), sub.length()) == sub)         return save_s.length() - s.length();      else           s = s.substr(0, s.length() - 2 );   }   return 0;}</PRE><P>What is the error?</P><P><TEXTAREA NAME="CCC_CH7_R1a" ROWS="4" COLS="80"></TEXTAREA></P><P>Did one of your test cases catch it ? Which ?</P><P><TEXTAREA NAME="CCC_CH7_R1b" ROWS="4" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H4>R2. Selecting Test Cases</H4><P>Test cases should provide <I>complete coverage</I> of each instruction branch in your function. Every branch,for example both statement blocks in an <TT>if - else</TT> pairing, should succeed and fail at least once each.</P><PRE>/* PURPOSE:  Simplified calculator to perform two variable arithmetic*/#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;        int main(){  double left, right, answer;   string op;            cout &lt;&lt; &quot;enter an arithmetic expression of form (e.g. 2 + 3):&quot; &lt;&lt; &quot;\n&quot;;   cin &gt;&gt; left &gt;&gt; op &gt;&gt; right;    if (a_operator == &quot;+&quot; )      {  answer = left + right;   }           else if (op == &quot;-&quot; )      {  answer = left - right;   }   else if (op == &quot;*&quot; )      {  answer = left * right;   }           else if (op == &quot;/&quot; )      {  if (right != 0)      {   answer = left / right;      }      else      {  cout &lt;&lt; left &lt;&lt; &quot; / &quot; &lt;&lt; right &lt;&lt; &quot; can't be computed with a 0 denominator&quot; &lt;&lt; &quot;\n&quot;;         return 1;      }   }   else   {  cout &lt;&lt; op &lt;&lt; &quot; is an unknown operation.&quot; &lt;&lt; &quot;\n&quot;;      return 1;   }           cout &lt;&lt; left &lt;&lt; &quot; &quot; &lt;&lt; op &lt;&lt; &quot; &quot; &lt;&lt; right &lt;&lt; &quot; = &quot; &lt;&lt; answer &lt;&lt; &quot;\n&quot;;   return 0;}                </PRE><P>Give a set of test cases for <TT>left, op</TT>, and <TT>right</TT> that provide complete coverage of all branches.</P><P><TEXTAREA NAME="CCC_CH7_R2a" ROWS="20" COLS="80"></TEXTAREA></P><P>Compile and run the program, then enter the test cases that you supplied. Does each branch work as expected?</P><P><TEXTAREA NAME="CCC_CH7_R2b" ROWS="20" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H4>P2. Test Case Evaluation</H4><P>Having tested the input to a function, how can the output be validated? You can :</P><UL>	<LI>Pick inputs that have known results	<LI>Use an inverse function to undo a result in order to compare it with the input	<LI>Compare result with an answer obtained another way</UL><P>Let's test the <TT>power()</TT> function from page 273</P><PRE>double power(double a, int n)/* PURPOSE:  Compute an integral power of a number   RECEIVES: a - the number to be raised to an integral power             n - the power to which it is to be raised   RETURNS:  a to the nth power */    {  double r = 1;   double b = a;   int i = n;      while (i &gt; 0)   {  if(i % 2 == 0)   /* n is even */      {  b = b * b;         i = i /2;      }      else             /* n is odd */      {  r = r * b;         i--;      }  }    return r;} </PRE><OL>	<LI>Write a program that uses the reciprocal <TT>sqrt</TT> to test whether <TT>sqrt(power(x,2)) == x</TT> <TEXTAREA	NAME="CCC_CH7_P2a" ROWS="12" COLS="80">/* your program here */</TEXTAREA>	<LI>If the test succeeds, how much confidence do you have that <TT>power</TT> is correct ? <TEXTAREA NAME="CCC_CH7_P2b"	ROWS="12" COLS="80"></TEXTAREA>	<LI>Use the fact that x<SUP>y</SUP> = e<SUP>y<SUP>.</SUP>log(x)</SUP>. Write a program that computes the <TT>power</TT>	function in another way, and compares the two values. <TEXTAREA NAME="CCC_CH7_P2c" ROWS="12" COLS="80">/* paste program here */</TEXTAREA>	<LI>(Extra credit) Which way is actually faster, <TT>power(double a, int n)</TT> or x<SUP>y</SUP> = e<SUP>y<SUP>.</SUP>log(x)</SUP>	? <TEXTAREA NAME="CCC_CH7_P2d" ROWS="12" COLS="80"></TEXTAREA></OL><H4>P3. Oracles</H4><P>Use the <TT>fib</TT> function in ch12/fibloop.cpp as an oracle to test whether the following function is correct:</P><PRE>#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;long fibonacci(int n)/* PURPOSE:  Compute a Fibonacci number   RECEIVES: n - an integer   RETURNS:  the nth Fibonacci number*/{  return (long)(pow((1 + sqrt(5)) / 2, n) / sqrt(5) + 0.5);}int main(){  int fib_number = 0;         cout &lt;&lt; &quot;Enter the number of the Fibonacci number to be computed : &quot; &lt;&lt; &quot;\n&quot;;   cin &gt;&gt; fib_number;    /*      your work goes here   */   return 0;}</PRE><P><TEXTAREA NAME="CCC_CH7_P3a" ROWS="12" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H4>P4. Assertions</H4><P>Use assertions in the following example to signal that an improper input has occurred and to prevent the badparameters from being utilized by the function.</P><PRE>#include &lt;iostream&gt;#include&nbsp;&lt;assert.h&gt;using namespace std;int convert_to_sec(int hours, int min)/* PURPOSE:  Compute seconds from midnight   RECEIVES: hours - hour of a clock time (between 0 and 23)             min - minutes of a clock time (between 0 and 59)   RETURNS:  the number of seconds between midnight and the clock time*/{  /* your work here -- assert that hours and min are within input range */   return hours * 3600 + min * 60;}int seconds_between(int hfrom, int mfrom, int hto, int mto)/* PURPOSE:  Compute the number of seconds between two clock times   RECEIVES: hfrom, mfrom - the hours and minutes of the earlier time             hto, mto - the hours and minutes of the later time   RETURNS:  the number of seconds between them {  int secs = convert_to_sec(hto, mto) - convert_to_sec(hfrom, mfrom);   /* your work here -- assert that the from time is before the to time */}  int main(){  int start_hr;   int start_min;   int end_hr;   int end_min;   cout &lt;&lt; &quot;Input start time: (hh mm) :&quot; &lt;&lt; &quot;\n&quot;;   cin &gt;&gt; start_hr &gt;&gt; start_min;   cout &lt;&lt; &quot;Input end time: (hh mm) :&quot; &lt;&lt; &quot;\n&quot;;   cin &gt;&gt; end_hr &gt;&gt; end_min;      cout &lt;&lt; seconds_between(start_hr, start_min, end_hr, end_min) &lt;&lt; &quot; seconds elapsed\n&quot;;   return 0;}</PRE><P><TEXTAREA NAME="CCC_CH7_P4a" ROWS="12" COLS="80">/* paste program here */</TEXTAREA></P><P>How does your program handle</P><UL>	<LI>input error, ie. <TT>start &gt; end </TT>? <BR>	<TEXTAREA NAME="CCC_CH7_P4b" ROWS="1" COLS="80"></TEXTAREA>	<LI><TT>hours &gt; 23 </TT>or <TT>minutes &lt; 0 <BR>	</TT><TEXTAREA NAME="CCC_CH7_P4c" ROWS="1" COLS="80"></TEXTAREA></UL><P><HR ALIGN="CENTER"><H4>R3. Program Traces</H4><P>A program trace is the result of print statements at known points in a program. It shows that the program hasexecuted commands up to a certain point. For example, the following <TT>main()</TT> function documents the parametersto <TT>power(int a, int n)</TT>.</P><PRE> int main(){  double a;   int n;   double answer;   cout &lt;&lt; &quot;Enter the number to be raised to a power; &quot; &lt;&lt; &quot;\n&quot;;   cin &gt;&gt; a;   cout &lt;&lt; &quot;Enter the power to which &quot; &lt;&lt; a &lt;&lt; &quot; is to be raised: &quot; &lt;&lt; &quot;\n&quot;;       cin &gt;&gt; n;    <B>   cout &lt;&lt; &quot;Before call to power(a,n), a= &quot; &lt;&lt; a &lt;&lt;      &quot; n= &quot; &lt;&lt; n           &lt;&lt; &quot; and answer = &quot; &lt;&lt;      answer &lt;&lt; &quot;\n&quot;;</B>   answer = power(a, n);   cout &lt;&lt; answer &lt;&lt; &quot;\n&quot;;   return 0;}    </PRE><P>Add print statements to the preceeding <TT>power(int a, int n)</TT> function to document all changes to variables<TT>r, a</TT> and <TT>n</TT>. Show the resulting trace when <TT>power</TT> is called with <TT>a = 3</TT> and <TT>n= 11</TT>.</P><P><TEXTAREA NAME="CCC_CH7_R3a" ROWS="20" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H4>R4. The Debugger</H4><P>The following portion of the lab is designed to have you practice some of the basics of debugging. Copy thefollowing program listing into a new file called pastri.cpp on your hard drive.</P><P><HR ALIGN="CENTER"><PRE>/********************************************************************    PROJECT:     Lab assignment on debugging*    FILE:        pastri.cpp*    PURPOSE:     To compute Pascal's triangle and illustrate *                 the use of the debugger.*    PROGRAMMER:  Leslie Foster*    REMARKS:     The code below is chosen to illustrate the debugger.*                 It is neither the most efficient nor the most reliable*                 way to solve this problem.*************************************************************************/#include &lt;iostream&gt;#include &lt;iomanip&gt;using namespace std;/*------------------------------------------------------------------*/void skip(int n)/*  PURPOSE:  To skip n spaces on a line    RECEIVES: n - the number of spaces to skip    REMARKS:  n should be non-negative*/{  int i;  /* a counter */   for (i = 0; i &lt;= n; i++ )       cout &lt;&lt; &quot; &quot;;}/*------------------------------------------------------------------*/int factorial(int n)/*  PURPOSE:  To calculate n factorial    RECEIVES: n - calculate the factorial of n    RETURNS:  n factorial    REMARKS:  n must be &gt;= 0.  Also if n is too large overflow may result*/{  int  product; /*  accumulator for the running product  */   int  i; /*  a counter  */   product = 1;   for (i = 1; i &lt;= n; i++)   {   product = product + i ;   }   return(product);}/*------------------------------------------------------------------*/int combination(int n, int k)/* PURPOSE:  to calculate the number of combinations of n things taken             k at a time (n choose k)   RECEIVES: n - the number of items to choose from             k - the number of items choosen   RETURNS:  n choose k   REMARKS:  n and k must be non-negative and k &lt;= n.  This program uses             the formula (n choose k) = n! / ( k! * (n-k)! ).*/{  int comb = factorial(n) / (factorial(k) * factorial(n-k));   return comb;}/*------------------------------------------------------------------*/int main(void){  int nrows; /*  the number of rows to print  */   int n; /*  a counter for the current row  */   int k; /*  a counter for the current column  */   int comb; /*  the number of combinations  */   int spaces_to_skip; /*  spaces to skip  */   cout &lt;&lt; &quot;Enter the number of rows (&lt;=13) in Pascal's triangle: &quot;;   cin &gt;&gt; nrows;   cout &lt;&lt; &quot;\n\n\n&quot;;      /*  print the title  * /   skip(16);   cout &lt;&lt; &quot;TABLE 1: THE FIRST &quot; &lt;&lt; nrows &lt;&lt; &quot; ROWS OF PASCAL'S TRIANGLE\n\n&quot;);   / *  start a loop over the number of rows  */   spaces_to_skip = 36;      for (n = 0; n &lt; nrows; n = n + 2)   {  skip(spaces_to_skip); /* space to make a triangle */      spaces_to_skip = spaces_to_skip - 2;      for (k = 0; k &lt;= n; k++)       {  comb = combination(n,k);         cout &lt;&lt; setw(4) &lt;&lt; comb;      }            cout &lt;&lt; &quot;\n&quot; ;    }    return 0;}</PRE><P><HR ALIGN="CENTER"><P>The program's purpose is to display Pascal's Triangle, a sequence of integers that arises in numerous areasof math and computer science, especially combinatorics and probability. When completed, the program's output shouldbe:</P><PRE>Enter the number of rows (&lt;= 13) in Pascal's Triangle. <FONT COLOR="#408080">5</FONT>     THE FIRST 5 ROWS OF PASCAL's TRIANGLE:                        1                      1   1                    1   2   1                  1   3   3   1                1   4   6   4   1                </PRE><P>Entries in Pascal's triangle are indexed by integers. <TT>n</TT> is the number of the row and <TT>k</TT> isthe position from the leftmost member of the row. The indexes in both directions start at zero (0), so in the fifthrow listed above, C(4,0) = 1, C(4,1) = 4, and so on.</P><P>The values themselves are computed by the formula <TT>C(n, k) = n! / ( k! (n-k)!)</TT>, which is called a <I>combination</I>.<TT>n!</TT> denotes a <I>factorial</I>, that is, the product <TT>n(n-1)(n-2)...(2)(1)</TT>. The combinations canbe interpreted as the number of ways to choose <TT>k</TT> elements from a collection containing <TT>n</TT> elements.When described, it is customary to say &quot;n choose k&quot;, for instance '4 choose 3 is 4' &quot;.</P><P>If 4 objects are numbered 1 through 4, how many ways can you select 2 of them ? Show all the possible pairingshere. Then compute C(4, 2) by using the formula.. Does it match the number of selections?</P><P><TEXTAREA NAME="CCC_CH7_R4a" ROWS="4" COLS="80"></TEXTAREA></P><P>As you will discover with the help of your debugger, the program to compute Pascal's triangle has some mistakes.Each provides an opportunity to learn a debugging concept in context of it's use.</P><H4>Compile the file</H4><UL>	<LI>Load the file pastri.cpp into your compiler.	<LI>Select the <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch7.html#RUN"><I>Run</I></A>	command from the debugger menu.	<LI>and enter <TT>5</TT> for input (the number of rows for the program to display)</UL><P>What output is displayed?</P><P><TEXTAREA NAME="CCC_CH7_R4b" ROWS="4" COLS="80"></TEXTAREA><H4>Step over / inspect</H4><UL>	<LI>Use the <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch7.html#RESET"><I>Reset</I></A>	command to reset your debugger	<LI>Then use the <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch7.html#STEP INTO"><I>Step	Into</I></A> command to restart the program from the very beginning.	<LI>Now use the <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch7.html#STEP OVER"><I>Step	Over</I></A> command several times, until the active line is	<PRE>cin &gt;&gt; nrows;</PRE>	<LI>Select <I>Step Over</I> again	<LI>The program is now expecting keyboard input because the <TT>cin &gt;&gt; nrows</TT> line is being executed.	<LI>Type <TT>5</TT> (followed by the Enter key) for the input.</UL><P>On what line is the cursor positioned now ?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4c" SIZE="25"><UL>	<LI>Select your compiler's <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch7.html#INSPECT"><I>Inspect</I></A>	command.	<LI>Inspect the value of <TT>nrows</TT></UL><P>What is the value for <TT>nrows</TT> shown in the dialog box?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4d" SIZE="25"><H4>More stepping</H4><UL>	<LI>Select <I>Step Over</I> twice	<LI>Look at the output for Pascal's triangle.</UL><P>Does the output have the title: <TT>TABLE 1: THE FIRST 5 ROWS OF PASCAL'S TRIANGLE </TT>?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4e" SIZE="25"></P><P>That is strange. The program is supposed to print three newlines, then the title. Let's find out why the titledoesn't appear.</P><UL>	<LI>Select <I>Reset</I> the to start the debugger once again.	<LI>Select <I>Step Into</I>	<LI>Then select <I>Step Over</I> until you reach the line prompting for input..	<LI>Enter <TT>5</TT> for <TT>nrows</TT>	<LI>Select <I>Step Over</I> one more time. This should skip over the line <TT>System.out.print(&quot;\n\n\n&quot;);</TT>	<LI>Select <I>Step Over</I> one more time.</UL><P>What line are you on now?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4h" SIZE="25"><UL>	<LI>Notice that you skipped over the line <BR>	<TT>cout &lt;&lt; &quot;TABLE 1: THE FIRST &quot; &lt;&lt; nrows &lt;&lt; &quot; ROWS OF PASCAL'S TRIANGLE\n\n&quot;);	</TT><BR>	The reason is that two delimiters for comments had extra spaces in them.	<LI>Change the line <BR>	<TT>/* print a title * / </TT>into <BR>	<TT>/* print a title */ </TT><BR>	and the line <BR>	<TT>/ * start a loop over the number of rows */ </TT>into <BR>	<TT>/* start a loop over the number of rows */</TT></UL><P>When you changed the positioning of the comment delimiters, did any changes occur to the commented text? Thisdepends on your development environment--describe what happened, if anything.</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4i" SIZE="25"><H4>Watch</H4><UL>	<LI>Recompile your program to incorporate your changes.	<LI>Select <I>Reset</I>	<LI>Then select <I>Run</I> to run the program.	<LI>Enter<TT>5</TT> for the number of rows. (Use <TT>5</TT> for input for all the runs until part 11, below).</UL><P>Does the title now show up on the screen?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4j" SIZE="25"></P><P>How many rows of Pascal's triangle are displayed?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4k" SIZE="25"><UL>	<LI>To find out why there are not five rows, return to the source code by pressing enter.	<LI>Select <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch7.html#WATCH"><I>Add watch</I></A>	<LI>Add <TT>n</TT> to the watch list. You will likely get a message such as <TT>n: Undefined symbol</TT>. The variable	<TT>n</TT> is undefined because you haven't yet started the program.	<LI>Select <I>Add watch</I> again	<LI>Add <TT>k</TT> to the watch list.</UL><P>How many lines are now in the watch window?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4l" SIZE="25"><UL>	<LI><I>Reset</I> and <I>Step Into</I>.	<LI>Select <I>Step Over</I> until you reach the line <TT>skip(spaces_to_skip); /* space to make a triangle */</TT></UL><P>What values of <TT>n</TT> and <TT>k</TT> are in the watch window? (If the watch window isn't present select<A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch7.html#WATCH"><I>View Watch</A></I><ANAME="VIEW WATCH RETURN"></A>.)</P><P><TEXTAREA NAME="CCC_CH7_R4m" ROWS="1" COLS="80"></TEXTAREA><UL>	<LI>Keep selecting <I>Step Over</I> until you are again at the line <TT>skip(spaces_to_skip); /* space to make	a triangle */</TT>.</UL><P>What are the values of <TT>n</TT> and <TT>k</TT>?</P><P><TEXTAREA NAME="CCC_CH7_R4n" ROWS="1" COLS="80"></TEXTAREA><UL>	<LI>Keep selecting <I>Step Over</I> until you exit the <TT>for</TT> loops and arrive at the line<TT> cout &lt;&lt;	&quot;\n&quot;;</TT></UL><P>Now what are the values of <TT>n</TT> and <TT>k</TT>?</P><P><TEXTAREA NAME="CCC_CH7_R4o" ROWS="1" COLS="80"></TEXTAREA><UL>	<LI>View the program output. Notice that there are only three rows in the triangle. This is because the <TT>n</TT>	values listed above went from 0 to 2 to 4 to 6. That is, the loop index <I>i</I> should have been increased by	one each time, not two.	<LI>Change the line of code: <TT>for (n = 0; n &lt; nrows - 1; n = n + 2)</TT> to be <TT>for (n = 1; n &lt;= nrows;	n++)</TT>	<LI>Recompile	<LI>Select <I>Run</I> and input <TT>5</TT> to the program where prompted. You should now have five rows in the	triangle.</UL><H4>Step into</H4><UL>	<LI>The entries in the triangle are still incorrect. To see one reason why, <I>Reset</I> and <I>Step Into</I> the	program, then press <I>Step Over</I> quite a few times, until the watch window first displays:	<PRE>   n: 2   k: 0</PRE>	You should be at line <TT>comb = combination(n, k);</TT>	<LI>Press <I>Step Into</I>, to get to the line <TT>int combination = factorial(n) / factorial(k) * factorial(n-k);	</TT>Notice that <I>Step Into</I> goes into each function as it is executed. That is why we've been using it to	start the <TT>main()</TT> program from the very beginning. Using <I>Step Over</I> always steps over the next function	to the next line of ode in the current procedure.	<LI>Press <I>Step Into</I> again. You should be at the line <TT>int product = 1; /* accumulated product */ </TT>in	the function <TT>factorial(n)</TT>	<LI>From the menu select <I>Inspect</I> and type in <TT>product</TT>. An inspect window should show up containing	<TT>product</TT>	<LI>Now press <I>Step Into</I> until you are at the line <TT>return product;</TT></UL><P>What value does <TT>n</TT> have in the window? (Note that <TT>k</TT> is undefined in the watch window since<TT>k</TT> is not active in the function factorial.</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4p" SIZE="25"></P><P>What value does <TT>product</TT> have in the inspect window?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4q" SIZE="25"><UL>	<LI>The reason that <TT>product</TT> in the inspect window is incorrect is that the line	<PRE>   product = product + i;</PRE>	should be	<PRE>   product = product * i;</PRE>	<LI>Close the Evaluate and the Inspect windows.	<LI>Make the above change in your editor.	<LI>Recompile	<LI><I>Reset</I> and <I>Run</I> the program again with input of <TT>5</TT>. Oh no! the triangle is still wrong!</UL><H4>Setting breakpoints</H4><P>It is tedious to have to keep stepping to get inside a program. A more efficient way is to set a breakpointat a line of interest. Then the program runs at full speed until a breakpoint is reached.</P><UL>	<LI><I>Reset</I> and make sure that <TT>n</TT> and <TT>k</TT> are still in the watch window (or add them again).	<LI>Select the line <TT>comb = combination(n,k) ;</TT>	<LI>Select <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch7.html#ADD BREAKPOINTS"><I>Add	Breakpoint</I></A> .	<LI>Select <I>Run</I> until the program stops at the breakpoint.	<LI>Repeat selecting <I>Run</I> until the watch window displays	<PRE>   n: 3   k: 1</PRE>	<LI>Then <I>Step Into</I> once	<LI>and then <I>Step Over</I> until you are at the line: <TT>return comb;</TT>	<LI>Select <I>Inspect</I>	<LI>and enter <TT>comb</TT> for the expression in the dialogue box.</UL><P>What is the value listed for <TT>comb</TT>?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4r" SIZE="25"><UL>	<LI>The true value for the combination of 3 things taken 1 at a time is 3! / 1!&middot;2! = 6 / 2 = 3. So, the	above value of <TT>comb</TT> is wrong.	<LI>Something must be wrong with our combination calculation. In fact, the programmer has ommitted parentheses	in the denominator for the line:	<PRE>   comb = factorial(n) / factorial(k) * factorial(n-k) ;</PRE>	<LI>Change the line to be:	<PRE>   comb = factorial(n) / (factorial(k) * factorial(n-k)) ;</PRE>	<LI>Recompile and select <I>Reset</I> and <I>Run</I></UL><P>Is your Pascal's Triangle correct (for <TT>nrows = 5</TT>)?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4s" SIZE="25"><H4>Finally</H4><UL>	<LI>Select the line <TT>comb = combination(n,k) ;</TT>	<LI>Select <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch7.html#TOGGLE BREAKPOINTS"><I>Toggle	Breakpoint</I></A> .	<LI>Select <I>Run</I></UL><P>Do the results look OK when you input 13 for the number of rows?</P><P><INPUT TYPE="TEXT" NAME="CCC_CH7_R4t" SIZE="25"></P><P>They should now. Exit, saving any files you might wish to keep.</P><P><HR ALIGN="CENTER"><H3>R5. Menu commands and shortcut keys for debuggers</H3><P>The following table lists commands for debuggers from Borland, MS and Symantec. If your debugger is not listed,find out its commands and fill in the table to the right.</P><P><TABLE BORDER="1" WIDTH="100%"><TBODY>  		<TR>		<TD>Feature</TD>		<TD>Borland Menu</TD>		<TD>Borland Shortcut</TD>		<TD>MSVC Menu</TD>		<TD>MSVC Shortcut</TD>		<TD>Symantec Menu</TD>		<TD>Symantec Shortcut</TD>		<TD>Your debugger</TD>	</TR>	<TR>		<TD><A NAME="RUN"></A>Run</TD>		<TD>Run | Run</TD>		<TD>Ctrl + F9</TD>		<TD>Build | Debug | Go</TD>		<TD>F5</TD>		<TD>Debug | Start/Restart debugging</TD>		<TD>F4</TD>		<TD><TEXTAREA NAME="CCC_CH7_R5a" ROWS="3" COLS="15"></TEXTAREA></TD>	</TR>	<TR>		<TD><A NAME="STEP OVER"></A>Step Over</TD>		<TD>Run | Step Over</TD>		<TD>F8</TD>		<TD>Debug | Step Over</TD>		<TD>F10</TD>		<TD>Window | Debug View | Step Over</TD>		<TD>F10</TD>		<TD><TEXTAREA NAME="CCC_CH7_R5b" ROWS="3" COLS="15"></TEXTAREA></TD>	</TR>	<TR>		<TD><A NAME="STEP INTO"></A>Step Into</TD>		<TD>Run | Trace Into</TD>		<TD>F7</TD>		<TD>Debug | Step Into</TD>		<TD>F11</TD>		<TD>Window | Debug View | Step Into</TD>		<TD>F8</TD>		<TD><TEXTAREA NAME="CCC_CH7_R5c" ROWS="3" COLS="15"></TEXTAREA></TD>	</TR>	<TR>		<TD><A NAME="OUTPUT SCREEN"></A>Output Screen</TD>		<TD>View | User screen</TD>		<TD>Alt + F5</TD>		<TD>View | Output</TD>		<TD>Alt + 2</TD>		<TD>Windows | Debug View | Output</TD>		<TD>Ctrl + Shift + O</TD>		<TD><TEXTAREA NAME="CCC_CH7_R5d" ROWS="3" COLS="15"></TEXTAREA></TD>	</TR>	<TR>		<TD><A NAME="RESET"></A>Reset</TD>		<TD>Debug | Program Reset</TD>		<TD>Ctrl+ F2</TD>		<TD>Debug | Stop Debugging</TD>		<TD>Shift + F5</TD>		<TD>Window | Debug Toolbox | Reset</TD>		<TD>Ctrl+ F2</TD>		<TD><TEXTAREA NAME="CCC_CH7_R5e" ROWS="3" COLS="15"></TEXTAREA></TD>	</TR>	<TR>		<TD><A NAME="INSPECT"></A>Inspect</TD>		<TD>Debug | Inspect</TD>		<TD>Alt + F4</TD>		<TD>View | Variables or Debug | Quickwatch</TD>		<TD>Alt + 3 or Shift + F9</TD>		<TD>Windows | View Toolbox | Inspector</TD>		<TD>Ctrl + Shift + N</TD>		<TD><TEXTAREA NAME="CCC_CH7_R5f" ROWS="3" COLS="15"></TEXTAREA></TD>	</TR>	<TR>		<TD><A NAME="WATCH"></A>Watch</TD>		<TD>Debug | Watches | Add watch</TD>		<TD>Ctrl + F7</TD>		<TD>View | Watch or View | Debug Menu | Watch</TD>		<TD>Alt + 4 or Alt + 3</TD>		<TD>Windows | View Toolbox | Watch</TD>		<TD>Ctrl + Shift + W</TD>		<TD><TEXTAREA NAME="CCC_CH7_R5g" ROWS="3" COLS="15"></TEXTAREA></TD>	</TR>	<TR>		<TD><A NAME="VIEW WATCH"></A>View Watch</TD>		<TD>Window | Watch</TD>		<TD>Ctrl + F7</TD>		<TD>View | Watch</TD>		<TD>Alt + 4</TD>		<TD>Windows | View Toolbox | Watch</TD>		<TD>Ctrl + Shift + W</TD>		<TD><TEXTAREA NAME="CCC_CH7_R5h" ROWS="3" COLS="15"></TEXTAREA></TD>	</TR>	<TR>		<TD><A NAME="ADD BREAKPOINTS"></A>Add Breakpoint</TD>		<TD>Debug | Breakpoints</TD>		<TD>n/a</TD>		<TD>Edit | Breakpoints</TD>		<TD>Alt + F9</TD>		<TD>Windows | Debug View | Add breakpoint</TD>		<TD>Ctrl + Shift + B</TD>		<TD><TEXTAREA NAME="CCC_CH7_R5i" ROWS="3" COLS="15"></TEXTAREA></TD>	</TR>	<TR>		<TD><A NAME="TOGGLE BREAKPOINTS"></A>Toggle Breakpoint</TD>		<TD>Debug | Toggle breakpoint</TD>		<TD>Ctrl+F8</TD>		<TD>Edit | Breakpoints</TD>		<TD>Alt + F9</TD>		<TD>Windows | Debug View | Toggle breakpoint</TD>		<TD>F9</TD>		<TD><TEXTAREA NAME="CCC_CH7_R5j" ROWS="3" COLS="15"></TEXTAREA></TD>	</TR></TBODY></TABLE><HR ALIGN="CENTER"><P>Don't forget to <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch7.html#submit">send youranswers</A> when you're finished.</FORM></BODY></HTML>