<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><HTML><HEAD>	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">	<META NAME="GENERATOR" Content="Microsoft FrontPage 4.0">	<TITLE>Big C++ Lab - Chapter 9 Vectors and Arrays</TITLE></HEAD><BODY><FORM ACTION="CCC_CH9_LAB.HTML" METHOD="POST" ENCTYPE="application/x-www-form-urlencoded"><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>    Chapter 9 - Vectors and Arrays</strong></font> </p><P><HR ALIGN="CENTER"><TABLE BORDER="0">	<TR>		<TD>Your name:</TD>		<TD><INPUT TYPE="TEXT" NAME="username" SIZE="20"></TD>	</TR>	<TR>		<TD>Your email address:</TD>		<TD><INPUT TYPE="TEXT" NAME="recipientaddr" SIZE="20"></TD>	</TR>	<TR>		<TD>Your student ID number:</TD>		<TD><INPUT TYPE="TEXT" NAME="ID" SIZE="20"></TD>	</TR></TABLE><INPUT TYPE="HIDDEN" NAME="useraddr" SIZE="-1" VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN" NAME="recipientname"SIZE="-1" VALUE="yourself since this form has not been customized for your institution"> <INPUT TYPE="HIDDEN" NAME="subject"SIZE="-1" VALUE="CCC Lab9"><P><A NAME="#submit"></A>Once this form has been customized for your institution, you can use this button <INPUTTYPE="SUBMIT" VALUE="Send lab"> to send your lab work. Be sure to read the <A HREF="instructions.html">instructions</A>before starting your work.</P><P><HR ALIGN="CENTER"><H4>Lab Objectives</H4><P>To gain experience with</P><UL>	<LI>using vectors to collect objects	<LI>accessing vector elements and resizing vectors	<LI>passing vectors to functions	<LI>common array algorithms	<LI>using matrices for one-dimensional and two-dimensional arrays</UL><H3>P1. Vector Subscripts</H3><P>In the text, we have frequently used the <TT>rand_int</TT> function to generate random integers. For example,<TT>rand_int(1, 6)</TT> generates random numbers between 1 and 6, simulating the throw of a die. In this lab assignment,you will use a vector to test whether the random generator is fair, that is, whether each possible value is generatedapproximately equally often.</P><P>Your program should ask the user</P><UL>	<LI>how many random numbers should be generated	<LI>what is the lowest number in the range (e.g. 1)	<LI>what is the highest number in the range (e.g. 6)</UL><P>Make a vector with <TT>high - low + 1</TT> elements, one for each possible outcome. Set each element to 0. Thenkeep calling the random number generator. If it returns a value <TT>v</TT>, then increment the counter belongingto <TT>v</TT>. There is just one catch. The random numbers are generated in the range <TT>low...high</TT>. Thevector subscripts fall in the range <TT>0...high - low</TT>. Therefore, you need to shift the ranges: the vectorelement corresponding to the random value <TT>v</TT> has subscript <TT>v - low</TT>.</P><P>After all numbers have been generated, print the counters. Here is a typical program run:</P><PRE>How many numbers do you want to generate? <FONT COLOR="#408080">1000</FONT>What is the low value? <FONT COLOR="#408080">1</FONT>What is the high value? <FONT COLOR="#408080">10</FONT>1    782   1013   1184    975   1036   1027   1128    919    9410  104</PRE><P><TEXTAREA NAME="CCC_CH9_P1a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P2. Using Vectors to Collect Data Items</H3><P>Vectors are frequently used to store and provide random access to a collection of objects of like type. In thefollowing lab program, you will generate random circle objects and store them in a vector. If a circle does notintersect any of the previously stored circles, you will add it to the vector. Finally, display all circles thatyou collected in the vector. The result should look something like this: (Note that none of the circles intersect.)</P><P><IMG SRC="ch9-circles.jpg" WIDTH="581" HEIGHT="562" ALIGN="BOTTOM" ALT="Randomly generated non-overlapping circles"BORDER="0" HSPACE="20" VSPACE="20" ALIGN="ABSMIDDLE"></P><P>Use the code of the <TT>circle_intersect</TT> function that is given below to test whether two circles intersect.To randomly generate a circle, simply pick random x- and y- positions between -10 and 10 for the center and a randomradius between 0 and 1. You need to compare each newly generated circle with <I>all</I> other circles before youcan add it. (For that reason, we need a vector to hold all circles.) If the new circle passes the test, use <TT>push_back</TT>to add it to the end of the vector.</P><PRE>#include &lt;vector&gt;using namespace std;#include &quot;ccc_win.cpp&quot;bool circle_intersect(Circle c1, Circle c2)/* PURPOSE: Test if two circles intersect            (distance between centers is less than sum of radii)*/{  if ( (c1.get_radius() + c2.get_radius()) &lt;          sqrt( pow((c2.get_center().get_x() -                     c1.get_center().get_x()),2) +                pow((c2.get_center().get_y() -                     c1.get_center().get_y()),2)))      return false;   else      return true; }int main()/* PURPOSE: Program to plot a finite number of non-overlapping,             randomly sized circles.*/{  vector&lt;Circle&gt; rand_circles;   int max_circles;   double rand_radius;   double x,y;   Point rand_center;   Circle c1;   bool intersect;   max_circles = cwin.get_int(&quot;How many random circles would you like to see ? &quot;);      /*      YOUR WORK GOES HERE   */   return 0;}</PRE><P><TEXTAREA NAME="CCC_CH9_P2a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P3. Resizing Vector Elements</H3><P>We can dynamically resize vectors so that they may grow and shrink.  While this is very convenient, it is inefficient. It is best to know the number of elements that you need for your vector when you create it.  However, you mightcome across a situation someday where you do not know the number of elements in advance and need to implement adynamic vector.</P><P>Rewrite the following program so that the user can enter&nbsp; any number of purchases, instead of just 10.</P><PRE>#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;int main(){	vector &lt;double&gt; purchases(10);	int i;	for (i=0;i&lt; 10;i++)	{		cout &lt;&lt;&quot;Enter a purchase amount&quot;;		cin &gt;&gt;purchases[i];	}	return (0);}</PRE><PRE><TEXTAREA NAME="TextArea" ROWS="30" COLS="83">/* paste program here */</TEXTAREA></PRE><P>Now, add to the above code to print out the vector in reverse order and remove each element after it is printed.</P><P><TEXTAREA NAME="TextArea" ROWS="30" COLS="83">/* paste program here */</TEXTAREA></P><PRE></PRE><H3>P4. Return Parameters and Return Values</H3><P>As with any other data type, when passing a vector as a parameter to a function, you need to choose between&quot;pass by value&quot; and &quot;pass by reference&quot;. If vector elements are being changed in the function,pass the vector as a reference parameter, for example, <TT>vector&lt;Employee&gt;&amp; empl</TT>. If the vector'scontents aren't going to be changed, then pass it as a value, <TT>vector&lt;Employee&gt; empl</TT>, or, for greaterefficiency, as a const reference paramter, like <TT>vector&lt;Employee&gt; const&amp; empl</TT>.</P><P>Copying an entire vector into a function can be expensive. Similarly, returning an entire vector as the resultof a function can be expensive. Rewrite (and re-comment) the following function into a procedure that accepts areference parameter and updates that parameter instead of returning a new vector as the result. Supply a <TT>main</TT>function that tests your function.</P><PRE>/* PURPOSE:  procedure to reverse elements in an integer vector   RECEIVES: int_values - a vector of integer values   RETURNS:  a copy of the vector, with the elements reversed*/   vector&lt;int&gt; reverse(vector&lt;int&gt; int_values){  int temp;   vector&lt;int&gt; result(int_values.length());      for(i = 0 ; i &lt; int_values.length(); i++)       result[int_values.length() - i - 1] = int_values[i];      return int_values;}</PRE><P><TEXTAREA NAME="CCC_CH9_P3a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P5. Simple Vector Algorithms -</H3><P>Consider finding an average shipping cost from a sequence of 5 shipments where the lowest shipping cost is discarded.Using the methods for Finding a Value, Counting, Collecting Matches and Deleting an Element given in the text,write a program to locate the max and min values in <TT>1.52, 3.44, 5.34, 6.43,4.44, 9.87,</TT> discard the lowest,and compute the average of the remaining scores.</P><P><TEXTAREA NAME="CCC_CH9_P4a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P>How does your program handle duplicate shipping costs ? For example, how would it process 3.43,3.43,3.43,2.11,2,11?What do you think it should do?</P><P><TEXTAREA NAME="CCC_CH9_P4b" ROWS="4" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H3>P6. Avoiding Parallel Vectors</H3><P>Write a program that reads in the names and scores of students and displays the names of the students with thehighest and lowest score.</P><P>A simple method of carrying out this task would be to have two parallel vectors</P><PRE>vector&lt;string&gt; names;vector&lt;int&gt; scores;</PRE><P>However, you should avoid parallel vectors in your solution.</P><P><TEXTAREA NAME="CCC_CH9_P5a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P7. Arrays</H3><P>Vectors are generally more convenient to use than the traditional C-style <I>arrays</I>. When defining an array,you must initialize its size to a constant value, and you cannot change that value again. If you fill the arraygradually, you must keep track of the actual size of the array and ensure that it does not exceed the maximum size.</P><P>Rewrite the program in exercise P2, but store the circles in an array</P><PRE>Circle bubbles[BUBBLES_MAXSIZE];</PRE><P>Do not show more circles than <TT>BUBBLES_MAXSIZE</TT>, even if the user requests a larger value.</P><P><TEXTAREA NAME="CCC_CH9_P7a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P8. Defining and Using Two-Dimensional Arrays</H3><P>Vectors store a linear arrangement of values, accessed by a single index. Two-dimensional arrays store a tabulararrangement of values, accessed by two indexes, for example <TT>matrix[i][j]</TT>, where <TT>i</TT> is the rowindex, and <TT>j</TT> is the column index.  A common two-dimensional array that you should have seen early on inyour education is a multiplication table.  For example, here is the multiplication table up to 5 X 5:</P><P><TABLE BORDER="1" WIDTH="100%">	<TR>		<TD WIDTH="16%"> </TD>		<TD WIDTH="16%">1</TD>		<TD WIDTH="16%">2</TD>		<TD WIDTH="16%">3</TD>		<TD WIDTH="16%">4</TD>		<TD WIDTH="20%">5</TD>	</TR>	<TR>		<TD WIDTH="16%">1</TD>		<TD WIDTH="16%">1</TD>		<TD WIDTH="16%">2</TD>		<TD WIDTH="16%">3</TD>		<TD WIDTH="16%">4</TD>		<TD WIDTH="20%">5</TD>	</TR>	<TR>		<TD WIDTH="16%">2</TD>		<TD WIDTH="16%">2</TD>		<TD WIDTH="16%">4</TD>		<TD WIDTH="16%">6</TD>		<TD WIDTH="16%">8</TD>		<TD WIDTH="20%">10</TD>	</TR>	<TR>		<TD WIDTH="16%">3</TD>		<TD WIDTH="16%">3</TD>		<TD WIDTH="16%">6</TD>		<TD WIDTH="16%">9</TD>		<TD WIDTH="16%">12</TD>		<TD WIDTH="20%">15</TD>	</TR>	<TR>		<TD WIDTH="16%">4</TD>		<TD WIDTH="16%">4</TD>		<TD WIDTH="16%">8</TD>		<TD WIDTH="16%">12</TD>		<TD WIDTH="16%">16</TD>		<TD WIDTH="20%">20</TD>	</TR>	<TR>		<TD WIDTH="16%">5</TD>		<TD WIDTH="16%">5</TD>		<TD WIDTH="16%">10</TD>		<TD WIDTH="16%">15</TD>		<TD WIDTH="16%">20</TD>		<TD WIDTH="20%">25</TD>	</TR></TABLE><P>Write a program which asks the user for the number of rows and columns for a multiplication table and printsout the corresponding results.</P><P><TEXTAREA NAME="CCC_CH9_P7a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P><BR></P><H3>P9. Additional Practice with Two-Dimensional Arrays</H3><P>Crosswords are a type of puzzle which have letters in common. For example,</P><PRE>          d       across          w          n</PRE><P>share the letter 'o'.</P><P>Write a program that will accept a list of words into a vector of strings, then make a 20 x 20 array of charactersthat contains a crossword puzzle with these words.</P><PRE>const int PUZZLE_ROWS = 20;const int PUZZLE_COLS = 20;char puzzle[PUZZLE_ROWS][PUZZLE_COLS];</PRE><P>For example, your program when given the list <TT>addle, apple, clowning, incline, plan, burr</TT> it displaysit as:</P><PRE>   addle   p      p     clowning   e   n       c       l       i    plan       e</PRE><P>That is, use the following method: Place the first word horizontally in the center of the top row. Place thenext word vertically. Check if there is a common letter with the preceding word, and if all the squares into whichyou want to place that word are still empty. (If you can't place it, skip the word.) Then switch back to horizontal,place the next word if possible, and so on.</P><P><TEXTAREA NAME="CCC_CH9_P8a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><P>Don't forget to <A HREF="#submit">send your answers</A> when you're finished.</FORM></BODY></HTML>