<!DOCTYPE HTML PUBLIC "-//SoftQuad//DTD HTML 3.2 + extensions for HoTMetaL PRO 3.0(U) 19961211//EN" "hmpro3.dtd"><HTML>    <HEAD>    <TITLE>Big C++ Lab - Chapter 2 Fundamental Data Types</TITLE>  </HEAD>    <BODY><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>  Chapter 2 - Fundamental Data Types</strong></font></p><hr align="center">      <FORM ACTION="CCC_CH2_LAB.HTML" METHOD="POST">    <TABLE BORDER="0">      <TR>        <TD>Your name: </TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="username"></TD>      </TR>      <TR>        <TD>Your email address: </TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="recipientaddr"></TD>      </TR>      <TR>        <TD>Your student ID number: </TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="ID"></TD>      </TR>    </TABLE><INPUT TYPE="HIDDEN" NAME="useraddr"     VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN"     NAME="recipientname"     VALUE="yourself since this form has not been customized for your institution">    <INPUT TYPE="HIDDEN" NAME="subject" VALUE="CCC Lab2">        <P><A NAME="#submit"></A>Once this form has been customized for your      institution, you can use this button <INPUT TYPE="submit" VALUE="Send lab">      to send your lab work. Be sure to read the <A HREF="instructions.html">instructions</A>      before starting your work.</P>    <HR>        <H4>Lab Objectives</H4>        <P>To gain experience with </P>    <UL>      <LI>integer and floating-point numbers </LI>      <LI>writing arithmetic expressions in C++ </LI>      <LI>appreciating the importance of comments and good code layout </LI>      <LI>defining and initializing variables and constants </LI>      <LI>recognizing the limitations of the <TT>int</TT> and <TT>double</TT>        types and the overflow and roundoff errors that can result </LI>      <LI>reading user input and displaying program output </LI>      <LI>changing the values of variables through assignment </LI>      <LI>using the ANSI C++ standard <TT>string</TT> type to define and        manipulate character strings </LI>      <LI>writing simple programs that read numbers and text, process the input        and display the results </LI>    </UL>    <HR>        <H3>R1. Number Types</H3>        <P>Numbers are essential to computing. In C++ there are two fundamental      numeric types: integers and floating point numbers. <I>Integers</I> have      no decimal part, whereas <I>floating point numbers</I> do. <I>Variables</I>      of either type are represented by user specified names. Space in the      computer's memory is associated with the name so that the variable acts      like a container for the numeric data. </P>        <P><I>Declaring</I> a variable reserves space in memory and associates a      specified name with it. When a variable is declared, it contains whatever      value is leftover from the previous use of the memory space. <I>Initializing</I>      a variable sets it to a specific value. If no specific value is known,      it's a good idea to initialize new variable to zero in order to avoid      having it contain a random value.</P>    <TABLE>      <TR>        <TD><U>type</U></TD>        <TD><U>name</U></TD>        <TD><U>= value;</U></TD>        <TD></TD>      </TR>      <TR>        <TD><TT>int</TT></TD>        <TD><TT>identifier;</TT></TD>        <TD></TD>        <TD><TT>/* Variable declared but not initialized */</TT></TD>      </TR>      <TR>        <TD><TT>int</TT></TD>        <TD><TT>identifier</TT></TD>        <TD><TT>= 0;</TT></TD>        <TD><TT>/* Variable declared and initialized to zero */</TT></TD>      </TR>      <TR>        <TD><TT>double</TT></TD>        <TD><TT>identifier</TT></TD>        <TD><TT>= value;</TT></TD>        <TD><TT>/* Variable declared and initialized to another value*/</TT></TD>      </TR>    </TABLE>        <P>Are the following integers and floating point numbers properly declared      and/or initialized? If not, supply a correction.</P>    <TABLE BORDER="1">      <TR>        <TD><tt>int 3;</tt></TD>        <TD><INPUT TYPE="text" SIZE="40" NAME="CCC_CH2_1a"></TD>      </TR>      <TR>        <TD><TT>double;</TT></TD>        <TD><INPUT TYPE="text" SIZE="40" NAME="CCC_CH2_1b"></TD>      </TR>      <TR>        <TD><TT>int = 19;</TT></TD>        <TD><INPUT TYPE="text" SIZE="40" NAME="CCC_CH2_1c"></TD>      </TR>      <TR>        <TD><TT>float myten =10.23;</TT></TD>        <TD><INPUT TYPE="text" SIZE="40" NAME="CCC_CH2_1d"></TD>      </TR>      <TR>        <TD><TT>double_sum =2.2;</TT></TD>        <TD><INPUT TYPE="text" SIZE="40" NAME="CCC_CH2_1e"></TD>      </TR>      <TR>        <TD><TT>int that_value 212;</TT></TD>        <TD><INPUT TYPE="text" SIZE="40" NAME="CCC_CH2_1f"></TD>      </TR>    </TABLE>        <P>When declaring a variable, take a moment to consider by what name it      will be known. A valid name is made up of characters from the set: <BR></P>    <TABLE BORDER="0">      <TR>        <TD><TT>ABCDEFGHIJKLMNOPQRSTUVWXYZ</TT></TD>        <TD>upper case letters</TD>      </TR>      <TR>        <TD><TT>abcdefghijklmnopqrstuvwxyz</TT></TD>        <TD>lower case letters</TD>      </TR>      <TR>        <TD><TT>0123456789</TT></TD>        <TD>digits</TD>      </TR>      <TR>        <TD>_</TD>        <TD>the underscore character</TD>      </TR>    </TABLE>        <P> The only limitation is that a variable name can't begin with a digit.      Of course, the name must be unique. Neither you nor the compiler would be      able to distinguish between variables with the same name. For some simple      cases, using single letters like <B><TT>i, j, k</TT></B> is enough, but      as programs grow larger this becomes less informative. Like the name for a      product or service, a variable name should do two things:</P>    <TABLE BORDER="0">      <TR>        <TD>1)</TD>        <TD>Be unique</TD>      </TR>      <TR>        <TD>2)</TD>        <TD>Express the purpose</TD>      </TR>    </TABLE>        <P>Mostly, this will happen if the name selected is descriptive enough to      tell a human reader how a variable is being used, for example <TT>count_messages</TT>,      <TT>user_preference</TT>, <TT>customer_name&nbsp; </TT>This will also help    you when you are trying to maintain the program later on, since a    descriptive name will assist you in remembering exactly what a variable is    used for. </P>        <P>Complete the following table of (bad) variable names, better names and      descriptions.</P>    <TABLE BORDER="1">      <TR>        <TD>Bad Variable Name</TD>        <TD>Variable Renamed</TD>        <TD>Description</TD>      </TR>      <TR>        <TD><tt>int monthly income</tt></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_1g"></TD>        <TD><INPUT TYPE="text" SIZE="40" NAME="CCC_CH2_1h"></TD>      </TR>      <TR>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_1i"></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_1j"></TD>        <TD><TT>integer counter</TT></TD>      </TR>      <TR>        <TD><TT>double %sales;</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_1k"></TD>        <TD><INPUT TYPE="text" SIZE="40" NAME="CCC_CH2_1l"></TD>      </TR>      <TR>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_1m"></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_1n"></TD>        <TD><tt>double sales of bikes</tt></TD>      </TR>    </TABLE>    <HR>        <H3>R2. Constants</H3>        <P>Like variables, any numeric constants used by your program should also      have informative names, for example: <TT>const int FLASH_POINT_PAPER =      451;</TT> or <TT>const int BOILING_POINT_WATER = 212</TT>. Using named      constants transform statements such as <TT>int y = 451 - x + 212</TT>      into the more intelligible <TT>int y = FLASH_POINT_PAPER - x +      BOILING_POINT_WATER</TT>.</P>        <P>Give definitions for each of the constant descriptions listed below</P>    <TABLE BORDER="1">      <TR>        <TD>const definition</TD>        <TD>Description</TD>      </TR>      <TR>        <TD><INPUT TYPE="text" SIZE="30" NAME="CCC_CH2_2a"></TD>        <TD>Number of days in a week</TD>      </TR>      <TR>        <TD><INPUT TYPE="text" SIZE="30" NAME="CCC_CH2_2b"></TD>        <TD>Number of weeks in a year</TD>      </TR>      <TR>        <TD><INPUT TYPE="text" SIZE="30" NAME="CCC_CH2_2c"></TD>        <TD>Minimum wage per hour</TD>      </TR>    </TABLE>    <HR>        <H3>P1. Comments</H3>        <P>Even carefully named variables are rarely sufficient to fully convey the      operation of a program. They do not, for example, provide an explanation      of a future feature that could be implemented because of how something is      done now, or leave a detailed description of how a variable is computed.      You can however place any additional information necessary in a comment.      Comments are plain text for humans to read. They are separated from the      machine readable code needed by the compiler by either of: </P><PRE>/* say whatever you want in here, between the slash-asterisk boundaries   the compiler will ignore it   . . .         */ </PRE>        <P>or </P><PRE>// say what ever you want from the double slashes to the end of the line . . .// the compiler will ignore it// . . .</PRE>        <P> From both design and documentation perspectives, it is a good idea to      get in the habit of commenting your code as early as possible. For      example, provide a brief description of what the program coins.cpp from      Section 2.2 does.</P><PRE>#include &lt;iostream&gt;using namespace std;int main()/* your work goes here--use // or /* as appropriate */<TEXTAREA NAME="CCC_CH2_3a" COLS="80" ROWS="5"></TEXTAREA>   {  cout &lt;&lt; &quot;How many pennies do you have? &quot;;   int pennies;   cin &gt;&gt; pennies;      cout &lt;&lt; &quot;How many nickels do you have? &quot;;   int nickels;   cin &gt;&gt; nickels;   cout &lt;&lt; &quot;How many dimes do you have? &quot;;   int dimes;   cin &gt;&gt; dimes;   cout &lt;&lt; &quot;How many quarters do you have? &quot;;   int quarters;   cin &gt;&gt; quarters;      double total = pennies * 0.01 + nickels * 0.05       + dimes * 0.10 + quarters * 0.25;       /* total value of the coins */          cout &lt;&lt; &quot;Total value = &quot; &lt;&lt; total &lt;&lt; &quot;\n&quot;;      return 0;}</PRE>        <P>Now, extend coins.cpp to prompt for and accept the number of Golden    Dollar coins, placing the finished code here. Add a comment to show      when you modified the code, and what change you made.</P><TEXTAREA NAME="CCC_CH2_3b" COLS="80" ROWS="25">/* paste code here */</TEXTAREA>    <HR>        <H3>R3. Input and Output</H3>        <P>C++ defines two standard streams that can be used for text mode input      and output, respectively <TT>cin</TT> and <TT>cout</TT>. Operator <TT>&gt;&gt;</TT>      and <TT>&lt;&lt;</TT> are used to direct input and output to and from the      stream.</P>        <P>In coins.cpp, for example, you used <TT>cin &gt;&gt; pennies;</TT> to      get user input. The expression <TT>cout &lt;&lt; &quot;Total value = &quot;;</TT>      displays the message <TT>&quot;Total value =&quot;</TT>. It was followed      by <TT>&lt;&lt; total </TT>, which places the contents of the variable      total into the <TT>cout</TT> stream.</P>        <P>Items in the input stream are separated by <I>white space</I> - spaces,      tabs and newlines. For example, two numbers may be input as </P><PRE>3   4</PRE>        <P>or</P><PRE>34 </PRE>        <P>If there is an error, the stream goes into a failed state rather than      plodding ahead with bad data. For example, if the user has typed</P><PRE>l0</PRE>        <P>(with a letter l) instead of</P><PRE>10</PRE>        <P>then the stream fails when trying to read a number.</P>        <P>Do the following lines of input data work properly? Why or why not?</P><PRE>User Input: 24 25 26int first, second, third;cin &gt;&gt; first &gt;&gt; second &gt;&gt; third;</PRE><TEXTAREA NAME="CCC_CH2_4a" COLS="80" ROWS="5"></TEXTAREA><PRE>User Input: 24.4 25.5 26double fourth, fifth, sixth;cin &gt;&gt; fourth &gt;&gt; fifth &gt;&gt; sixth;</PRE><TEXTAREA NAME="CCC_CH2_4b" COLS="80" ROWS="5"></TEXTAREA><PRE>User Input: 24.4 25.5 26.6int seventh, eighth, ninth;cin &gt;&gt; seventh &gt;&gt; eighth &gt;&gt; ninth;</PRE><TEXTAREA NAME="CCC_CH2_4c" COLS="80" ROWS="5"></TEXTAREA><PRE>User Input: 23.4 24.5double tenth, eleventh, twelfth;cin &gt;&gt; tenth &gt;&gt; eleventh &gt;&gt; twelfth;</PRE><TEXTAREA NAME="CCC_CH2_4d" COLS="80" ROWS="5"></TEXTAREA>    <HR>        <H3>R4. Assignment</H3>        <P>There are several primary ways to modify the contents of a variable in      C++.</P>    <UL>      <LI><TT>cin &gt;&gt; </TT><I>variable</I>; the '<TT>&gt;&gt;</TT>'        operator places the contents of the input stream into the variable</LI>      <LI><I>variable</I><TT> = 3;</TT> the '<TT>=</TT>' operator, called        the assignment operator, takes whatever combination of values are on its        right side and puts them into a variable on its left side.</LI>      <LI><I>variable</I>++; the '<TT>++</TT>' operator increments, or adds 1        to the variable to which it is appended. Similarly, the '--' operator        will decrement an integer variable by 1.</LI>    </UL>        <P>During compilation, values on both sides of the <TT>&gt;&gt;</TT> and      <TT>=</TT> operators are checked to insure that the data received matches      the data type of the variable to which it will be assigned. Are the right      and left hand sides of the assignment operators of compatible type in the      following statements?</P>    <TABLE BORDER="1">      <TR>        <TD><TT>int d=4;</TT></TD>        <TD><INPUT TYPE="text" SIZE="30" NAME="CCC_CH2_5a"></TD>      </TR>      <TR>        <TD><TT>double a; int c = c * (6 + a);</TT></TD>        <TD><INPUT TYPE="text" SIZE="30" NAME="CCC_CH2_5b"></TD>      </TR>      <TR>        <TD><TT>double q = &quot;3&quot;;</TT></TD>        <TD><INPUT TYPE="text" SIZE="30" NAME="CCC_CH2_5c"></TD>      </TR>    </TABLE>        <P>What error does your compiler give in these cases?:</P>    <TABLE BORDER="1">      <TR>        <TD><U>Statement</U></TD>        <TD><U>Error message</U></TD>      </TR>      <TR>        <TD><TT>kq+2 = 19; </TT></TD>        <TD><INPUT TYPE="text" SIZE="80" NAME="CCC_CH2_5d"></TD>      </TR>      <TR>        <TD><TT>PI = 3; </TT></TD>        <TD><INPUT TYPE="text" SIZE="80" NAME="CCC_CH2_5e"></TD>      </TR>      <TR>        <TD>xz = 20++;</TD>        <TD>&nbsp;</TD>      </TR>    </TABLE>        <P>Because a variable of any given type represents a fixed amount of space      in memory, there is a limit to how large a value it can store.</P>        <P>Size limitations are particularly evident with integers. On some      computers, integers can only be about 32,000, on others, they can go up to      a little more than 2,000,000,000. What is the largest value your compiler will      accept for a signed integer? What is the most negative allowed value?</P><TEXTAREA NAME="CCC_CH2_5f" COLS="80" ROWS="3"></TEXTAREA>        <P>Floating point numbers don't round to the nearest integer value. Can you      explain the values your compiler assigns to <TT>f</TT> and <TT>g</TT>      in:</P><PRE>double f = pow(10.0, 20.0) - 53;double g = f;g = g - 53;cout &lt;&lt; f &lt;&lt; &quot;\n&quot; &lt;&lt; g &lt;&lt; &quot;\n&quot;;</PRE><TEXTAREA NAME="CCC_CH2_5g" COLS="80" ROWS="3"></TEXTAREA>    <HR>        <H3>R5. Arithmetic</H3>        <P>Recalling what you've learned about integers and floating point values,      what value is assigned to Z by each of the following?</P>    <TABLE BORDER="1">      <TR>        <TD><TT>int Z = 9 + 2;</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6a"></TD>      </TR>      <TR>        <TD><TT>int Z = 9 - 2;</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6b"></TD>      </TR>      <TR>        <TD><TT>int Z = 5 * 2;</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6c"></TD>      </TR>      <TR>        <TD><TT>int Z = 8</TT>&nbsp; <TT>/ 4;</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6d"></TD>      </TR>      <TR>        <TD><TT>int Z = 9 / 4;</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6e"></TD>      </TR>      <TR>        <TD><TT>double Z = 9 / 4;</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6f"></TD>      </TR>      <TR>        <TD><TT>int Z = 222 / 300;</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6g"></TD>      </TR>      <TR>        <TD><TT>double Z = 222.0 / 300.0;</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6h"></TD>      </TR>      <TR>        <TD><tt>int Z = 222 / 300.00;</tt></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6i"></TD>      </TR>      <TR>        <TD><TT>double Z = pow(3,6);</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6j"></TD>      </TR>    </TABLE>        <P>Translate the following algebraic expressions into C++ :</P>    <TABLE BORDER="1">      <TR>        <TD><TT>y = x + 3/4 - 2</TT></TD>        <TD><INPUT TYPE="text" SIZE="40" NAME="CCC_CH2_6k"></TD>      </TR>      <TR>        <TD><TT> y = x<SUP>2</SUP> + 6x - 2</TT></TD>        <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6l"></TD>      </TR>      <TR>        <TD><PRE>     x y = ---    1-x</PRE></TD>                <TD><INPUT TYPE="text" SIZE="20" NAME="CCC_CH2_6m"></TD>      </TR>    </TABLE>    <HR>        <H3>Strings</H3>        <P>Many programs manipulate not just numbers but text. C++ stores text in      string variables. They are declared and assigned in a manner similar to a      numeric variable, and the sequence may have any length, including being      uninitialized or having 0 characters. For example, </P><PRE>string name = &quot;Jane Doe&quot;;</PRE>        <P> assigns the 8 characters enclosed in quotes to the variable <TT>name</TT>.</P><PRE> string temp = name; </PRE>        <P>assigns the content of variable <TT>name</TT> to variable <TT>temp</TT></P><PRE>cout &lt;&lt; name; </PRE>        <P>displays the contents of variable <TT>name</TT> on the standard output      stream.</P>        <H4>R6. Concatenation</H4>        <P>Given: </P><PRE>   string first_name = &quot;Kenneth&quot;;   string last_name = &quot;Cole&quot;;   string name;</PRE>        <P>What value will <TT>name</TT> contain after </P><PRE>      name = first_name + last_name;</PRE><TEXTAREA NAME="CCC_CH2_7a" COLS="80" ROWS="4"></TEXTAREA>        <P>How could the preceding be revised to give a better result?</P><TEXTAREA NAME="CCC_CH2_7b" COLS="80" ROWS="4"></TEXTAREA>        <H4>R7. Substrings</H4>        <P>The primary difference between strings and numeric data types is that      any portion of the characters in a string variable is itself a string      variable. Such a portion is called a <I>substring</I>.</P>        <P>What will be the resulting substring in the following examples? If      invalid, give a corrected version of the call to <TT>substr</TT>.</P>    <TABLE BORDER="1">      <TR>        <TD WIDTH="50%"><TT>string name = &quot;Robert Sourchie&quot;; <BR>          string first_name = name.substr(2, 4);</TT></TD>        <TD WIDTH="67%"><INPUT TYPE="text" SIZE="60" NAME="CCC_CH2_7c"></TD>      </TR>      <TR>        <TD WIDTH="50%"><TT>string name = &quot;Robert Sourchie&quot;' <BR>         string last_name = name.substr(7, 4);</TT></TD>        <TD WIDTH="50%"><INPUT TYPE="text" SIZE="60" NAME="CCC_CH2_7d"></TD>      </TR>      <TR>        <TD WIDTH="50%"><TT>string name = &quot;Pamela Sourchie&quot;; <BR>         string name2 = name.substr(1, 11);</TT></TD>        <TD WIDTH="50%"><INPUT TYPE="text" SIZE="60" NAME="CCC_CH2_7e"></TD>      </TR>    </TABLE>        <H4>P2. Extracting Substrings</H4>        <P>Using <TT>substr</TT> and concatenation, give a program containing a      sequence of commands that will extract characters from <TT>input_string =      &quot;Four score and seven years ago our fathers&quot;</TT>&nbsp; to      make <TT>output_string = &quot;carefree and no tears&quot;</TT>. Then print <TT>output_string</TT>.</P><TEXTAREA NAME="CCC_CH2_8b" COLS="80" ROWS="16">/* paste program here */</TEXTAREA>        <H4>P3. Reading string input</H4>        <P>The function <TT>getline(cin, s)</TT> read a single input line into the      string <TT>s</TT>. Write a program that uses <TT>getline</TT> to read      input of the following exact form: </P>    <PRE>FNAME <I>first name</I>MNAME <I>middle name</I>LNAME <I>last name</I>ADDRESS <I>a street name and house number</I>CITY <I>a city name</I>STATE <I>a state abbreviation</I>ZIP <I>a zip code</I>     ORDER_DATE <i>the date of the order</i>    TOTAL_ITEMS <i>number of items (an integer)</i>ORDER_TOTAL <i>total amount of order (type double)</i>SHIP_DATE   <i>date of shipment</i></PRE>        <P>Then print out the top part of a shipment manifest in the following form: </P>    <PRE>John Q. Public11801 Jones Valley Ct.Pleasant Hills, MN 66504=====================================================================xOrder Date: 10-Oct-2001    Total Items: 10    Order Total: $100.00Ship Date: 20-Oct-2001</pre><TEXTAREA NAME="CCC_CH2_8a" COLS="80" ROWS="10">/* paste program here */</TEXTAREA>        <H4>P4. Formatting numbers</H4>        <P>You use the <TT>setprecision</TT>, <TT>setw</TT> and <TT>fixed</TT>      manipulators defined in the <TT>&lt;iomanip&gt;</TT> header to control      the formatting of numbers. Write a program that calculates the interest    and principal payments on a simple loan.&nbsp; Your program should query the user for a      percentage annual interest rate, an initial balance and monthly payment, then print out the      following table:</P>    <PRE>Month Balance		Interest	Payment    1 $ 10050.00	$  100.50	$  500.00    2 $ 9650.5		$   96.51       $  500.00    3 $ 9247.01		$   92.47	$  500.00    4 $ 8839.48		$   88.39	$  500.00</PRE>        <P>Use <TT>setw</TT> to set each column width, and use <TT>fixed</TT> and      <TT>setprecision</TT> to properly show dollars and cents.</P><TEXTAREA NAME="CCC_CH2_8c" COLS="80" ROWS="20">/* paste program here */</TEXTAREA>    <HR>        <P>Don't forget to <A HREF="#submit">send your answers</A> when you're      finished.</P></FORM>  </BODY></HTML>