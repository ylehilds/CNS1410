<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><HTML><HEAD>	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">	<META NAME="GENERATOR" Content="Microsoft FrontPage 4.0">	<TITLE>Big C++ Lab - Chapter 3 Objects</TITLE></HEAD><BODY><FORM ACTION="CCC_CH3_LAB.HTML" METHOD="POST" ENCTYPE="application/x-www-form-urlencoded"><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>    Chapter 3 - Objects</strong></font></p><hr align="center"><TABLE BORDER="0">	<TR>		<TD>Your name:</TD>		<TD><INPUT TYPE="TEXT" NAME="username" SIZE="20"></TD>	</TR>	<TR>		<TD>Your email address:</TD>		<TD><INPUT TYPE="TEXT" NAME="recipientaddr" SIZE="20"></TD>	</TR>	<TR>		<TD>Your student ID number:</TD>		<TD><INPUT TYPE="TEXT" NAME="ID" SIZE="20"></TD>	</TR></TABLE><INPUT TYPE="HIDDEN" NAME="useraddr" SIZE="-1" VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN" NAME="recipientname"SIZE="-1" VALUE="yourself since this form has not been customized for your institution"> <INPUT TYPE="HIDDEN" NAME="subject"SIZE="-1" VALUE="CCC Lab3"><P><A NAME="#submit"></A>Once this form has been customized for your institution, you can use this button <INPUTTYPE="SUBMIT" VALUE="Send lab"> to send your lab work. Be sure to read the <A HREF="instructions.html">instructions</A>before starting your work.</P><P><HR ALIGN="CENTER"><H4>Lab Objectives</H4><P>To gain experience in</P><UL>	<LI>using objects	<LI>constructing objects and supplying initial values	<LI>using member functions and the dot notation	<LI>modifying and querying the state of an object through its member functions	<LI>writing simple graphics programs containing points, lines, circles and text.	<LI>selecting appropriate coordinate systems	<LI>processing user input and mouse clicks in graphics programs	<LI>developing test cases that validate the correctness of your programs</UL><P><HR ALIGN="CENTER"><H3>R1. Constructing Objects</H3><P>Declaring an object to store information is like declaring a variable of numeric data type. For instance</P><PRE>int counter; /* makes an int */Time  lunch_time; /* makes a Time object */</PRE><P>While both of these statements declare a new variable, there is a difference in how each is initialized. Whendeclaring counter, the value will be whatever is leftover from that memory location's last use. Quality tip 2.xsuggests setting int counter = 0; to avoid this problem.</P><P>Objects are initialized when they are defined, based upon the object type. Time objects are initialized to thecurrent time. If you don't want to initialize an object with the default, you supply <I>construction parameters</I>.For example, you can construct a <TT>Time</TT> object by specifying hour, minute and second, for example <TT>Time(11,20,0)</TT></P><P>To what values is a <TT>Time</TT> object set by <TT>Time new_time = Time()</TT></P><P><TEXTAREA NAME="CCC_CH3_R1a" ROWS="2" COLS="80"></TEXTAREA></P><P>Initialize a <TT>Time</TT> variable to the time you usually get up.</P><P><TEXTAREA NAME="CCC_CH3_R1b" ROWS="2" COLS="80"></TEXTAREA></P><P>What is the outcome of constructing a <TT>Time</TT> object with</P><P><TT>Time next_date(Saturday, 18, 0, 0);</TT> <TEXTAREA NAME="CCC_CH3_R1c" ROWS="2" COLS="80"></TEXTAREA></P><P>What is the outcome of <TT>Time next_date = 6:00pm</TT>?</P><P><TEXTAREA NAME="CCC_CH3_R1d" ROWS="2" COLS="80"></TEXTAREA></P><P>What is the difference between <TT>Time next_date(18, 0, 0)</TT> and <TT>next_date = Time (18, 0, 0);</TT></P><P><TEXTAREA NAME="CCC_CH3_R1e" ROWS="2" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H3>R2. Using Objects</H3><P>An object's <I>member functions</I> are applied to a particular instance of an object type using the <I>dot-notation</I>.For example, <TT>time_var.get_seconds()</TT> returns the number of seconds stored in a particular <TT>Time</TT>object called <TT>time_var</TT>. Member functions that return stored information when applied to an object arecalled <I>accessors</I>, those that change the stored information are called <I>mutators</I>.</P><P>Given two instances of the <TT>Time</TT> class, the beginning and end of a typical workday:</P><PRE>tstart = Time(9,0,0)tend = Time(17,0,0)</PRE><P>What is the result of each of the following:</P><P><TT>cout &lt;&lt; tstart.get_hours() &lt;&lt; &quot; / &quot; &lt;&lt; tstart.get_minutes()</TT></P><P><TEXTAREA NAME="CCC_CH3_R2a" ROWS="2" COLS="80"></TEXTAREA></P><P><TT>tend.add_seconds(1200);</TT></P><P><TEXTAREA NAME="CCC_CH3_R2b" ROWS="2" COLS="80"></TEXTAREA></P><P><TT>tend.seconds_from(tstart);</TT></P><P><TEXTAREA NAME="CCC_CH3_R2c" ROWS="2" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H3>R3. Real Life Objects</H3><P>A direct and natural comparison can be made between an object and the entity that it represents. For example,here is how you might construct and access objects of an Address class:</P><PRE>Address a(number, street_name, street_type);a.get_number();a.get_street_name();a.get_street_type();</PRE><P>Personal information about an individual would be another common example. Give a constructor and correspondingaccessors for personal information having the following form:</P><P>Serdni Vasnar<BR>096-33-2123<BR>December 30, 1949</P><P><TEXTAREA NAME="CCC_CH3_R3a" ROWS="6" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><H3>Graphics Structures</H3><H4>P1. Lines</H4><P>Write a program that uses five <TT>Line</TT> objects to draw a pentagon, like this:</P><P><IMG SRC="ccc_ch3_files/ch3_pentagon.gif" width="400" height="300" ALIGN="BOTTOM" BORDER="0"></P><P><TEXTAREA NAME="CCC_CH3_P1a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><H4>P2. Lines and Circles</H4><P>Use <TT>Circle</TT> and <TT>Line</TT> objects to draw a train engine like this :</P><H1><IMG SRC="ccc_ch3_files/ch3_train.gif" width="400" height="300" ALIGN="BOTTOM" BORDER="0"></H1><P><TEXTAREA NAME="CCC_CH3_P2a" ROWS="40" COLS="80">/* paste program here */</TEXTAREA></P><H4>P3. Moving graphical objects</H4><P>Generate five circles with center (0,0) and radius 1, 2, 3, 4, and 5. Use themove method of the Circle class to draw the circles all tangent at a common point, like this:</P><P><IMG SRC="ccc_ch3_files/ch3-5CIRCLES.jpg" width="184" height="167" ALIGN="ABSMIDDLE" ALT="Line drawing tangent circles" BORDER="0"HSPACE="20" VSPACE="20" ALIGN="ABSMIDDLE"></P><P><TEXTAREA NAME="CCC_CH3_P3a" ROWS="40" COLS="80">/* paste program here */</TEXTAREA></P><P><HR ALIGN="CENTER"><H3>Choosing a Coordinate System</H3><H4>P4. Comparing coordinate systems</H4><P>Given a coordinate system where the upper lefthand corner is (0,0) and the lower righthand corner is (3,3),write a graphics program to draw a stopsign like this:</P><P><IMG SRC="ccc_ch3_files/ch3-STOPSIGN.jpg" width="300" height="300" ALIGN="ABSMIDDLE" ALT="irregular stopsign" BORDER="0" HSPACE="20"VSPACE="20" ALIGN="ABSMIDDLE"></P><P><TEXTAREA NAME="CCC_CH3_P4a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P>Change the program to display the same stopsign in a coordinate system with upper left = (-2.5, 1.5) and lower-right= (1.5, -3.5).</P><P><TEXTAREA NAME="CCC_CH3_P4b" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P>Which coordinate system was easier for you to work with? Why?</P><P><BR><TEXTAREA NAME="CCC_CH3_P4c" ROWS="8" COLS="80"></TEXTAREA></P><H4>P5. Zooming out</H4><P>Modify the phoenix.cpp program of the textbook to display the points in a zoomed-out coordinate system, thatis, the curve should look as though it is being viewed from a greater distance, but still be centered, like this:</P><P><IMG SRC="ccc_ch3_files/ch3-PHOENIX.jpg" width="464" height="460" ALIGN="ABSMIDDLE" ALT="Zoomed-out view of phoenix.cpp" BORDER="0"HSPACE="20" VSPACE="20" ALIGN="ABSMIDDLE"></P><PRE>#include &quot;ccc_win.cpp&quot;int main(){  cwin.coord(1, 33, 12, 11) // only change this line!!!   cwin &lt;&lt; Point(1, 11);   cwin &lt;&lt; Point(2, 12);      cwin &lt;&lt; Point(3, 16);      cwin &lt;&lt; Point(4, 20);      cwin &lt;&lt; Point(5, 25);      cwin &lt;&lt; Point(6, 31);      cwin &lt;&lt; Point(7, 33);      cwin &lt;&lt; Point(8, 32);      cwin &lt;&lt; Point(9, 29);      cwin &lt;&lt; Point(10, 23);      cwin &lt;&lt; Point(11, 16);      cwin &lt;&lt; Point(12, 12);      return 0;}</PRE><P><BR><TEXTAREA NAME="CCC_CH3_P5a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P><HR ALIGN="CENTER"><H3>P6. Getting Input from the Graphics Window</H3><P>Write a program that 1) gets two mouseclick points from the user 2) draws a rectangle with the coordinates ofthe clicks as upper-left and lower-right corners, 3) prompts for the user's name and 4) draws the name inside therectangle.</P><P><TEXTAREA NAME="CCC_CH3_P6a" ROWS="30" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P7. Comparing Visual and Numerical Information</H3><P>On a Cartesian coordinate plane with upper-left = (-10,10) and lower-right = (10, -10), write a program that1) draws the coordinate axes, 2) gets and plots 2 user mouse clicks and their coordinates, 3) plots the line betweenthem, and 4) calculates and plots the y-intercept of the line and its coordinates, like this:</P><P><IMG SRC="ccc_ch3_files/ch3-DESCART.jpg" width="544" height="495" ALIGN="ABSMIDDLE" ALT="Plot line on Cartesian plane" BORDER="0"HSPACE="20" VSPACE="20" ALIGN="ABSMIDDLE"> <BR><TEXTAREA NAME="CCC_CH3_P7a" ROWS="40" COLS="80">/* paste program here */</TEXTAREA></P><P>Verify the appearance of the Y-intercept by calculating its value by hand. Show your work here.</P><P><TEXTAREA NAME="CCC_CH3_P7b" ROWS="10" COLS="80"></TEXTAREA> <HR ALIGN="CENTER"><P>Don't forget to <A HREF="#submit">send your answers</A> when you're finished.</FORM></BODY></HTML>