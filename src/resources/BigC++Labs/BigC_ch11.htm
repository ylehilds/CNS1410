<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><HTML><HEAD>	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows">	<TITLE>Big C++ Lab - Chapter 11 Inheritance</TITLE></HEAD><BODY><FORM ACTION="CCC_CH11_LAB.HTML" METHOD="POST" ENCTYPE="application/x-www-form-urlencoded"><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>    Chapter 11 - Inheritance </strong></font> </p><P><HR ALIGN="CENTER"><TABLE BORDER="0">	<TR>		<TD>Your name:</TD>		<TD><INPUT TYPE="TEXT" NAME="username" SIZE="20"></TD>	</TR>	<TR>		<TD>Your email address:</TD>		<TD><INPUT TYPE="TEXT" NAME="recipientaddr" SIZE="20"></TD>	</TR>	<TR>		<TD>Your student ID number:</TD>		<TD><INPUT TYPE="TEXT" NAME="ID" SIZE="20"></TD>	</TR></TABLE><INPUT TYPE="HIDDEN" NAME="useraddr" SIZE="-1" VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN" NAME="recipientname"SIZE="-1" VALUE="yourself since this form has not been customized for your institution"> <INPUT TYPE="HIDDEN" NAME="subject"SIZE="-1" VALUE="CCC Lab11"></P><P><A NAME="#submit"></A>Once this form has been customized for your institution, you can use this button <INPUTTYPE="SUBMIT" VALUE="Send lab"> to send your lab work. Be sure to read the <A HREF="instructions.html">instructions</A>before starting your work.</P><P><HR ALIGN="CENTER"><H4>Lab Objectives</H4><P>To gain experience with</P><UL>	<LI>using the concepts of inheritance and polymorphism	<LI>using inheritance as a tool for code reuse	<LI>calling base-class constructors and member functions	<LI>implementing dynamic binding with virtual functions</UL><P><HR ALIGN="CENTER"><H3>P1. Inheritance</H3><P>Consider using the following <TT>Card</TT> class as a base class to implement a hierarchy of related classes:</P><P><TABLE BORDER="0" WIDTH="50%">	<TR>		<TD><U>Class</U></TD>		<TD><U>Data</U></TD>	</TR>	<TR>		<TD>IDcard</TD>		<TD>ID number</TD>	</TR>	<TR>		<TD>Calling Card</TD>		<TD>Card number, PIN</TD>	</TR>	<TR>		<TD>DriverLicense</TD>		<TD>Expiration date</TD>	</TR></TABLE></P><PRE>class Card{public:   Card();   Card(string n);   virtual bool is_expired() const;    virtual void print() const; private:   string name;};Card::Card(){  name = &quot;&quot;;}Card::Card(string n){  name = n;}Card::is_expired(){   return false;}</PRE><P>Write definitions for each of the derived classes. For each derived class, supply private data members and thedeclarations (but not the definitions) of the constructors and the <TT>print</TT> function:</P><P><TEXTAREA NAME="CCC_CH13_P1a" ROWS="20" COLS="80">/* paste code here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P2. Calling the Base-Class constructor</H3><P>Implement constructors for each of the three derived classes. Each constructor needs to call the base classconstructor to set the name.</P><P><TEXTAREA NAME="CCC_CH13_1a" ROWS="20" COLS="80">/* paste code here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P3. Virtual Functions</H3><P>Supply the implementation of a virtual <TT>print</TT> function for the card class and corresponding overloadedfunctions in each of the other three derived classes. The derived class functions need to call the base class <TT>print</TT>to print the name of the cardholder.</P><P><TEXTAREA NAME="CCC_CH13_P3a" ROWS="20" COLS="80">/* paste code here */</TEXTAREA></P><P>Devise another class, <TT>Billfold</TT>, which contains a <TT>vector&lt;Card*&gt;</TT>, a member function <TT>add_card(Card*)</TT>and a member function <TT>print_cards()</TT>. Of course, <TT>print_cards</TT> invokes the virtual <TT>print</TT>function on each card.</P><P><TEXTAREA NAME="CCC_CH13_P3b" ROWS="20" COLS="80">/* paste code here */</TEXTAREA></P><P>Have a main function populate a <TT>Billfold</TT> object with <TT>Card*</TT> objects, and then call <TT>print_cards</TT>.</P><P><TEXTAREA NAME="CCC_CH13_P3c" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P>Show the output of your test run.</P><P><TEXTAREA NAME="CCC_CH13_P3d" ROWS="10" COLS="80">/* paste output here */</TEXTAREA></P><P>Is <TT>print_cards</TT> a virtual function? Explain.</P><P><TEXTAREA NAME="CCC_CH13_P3e" ROWS="3" COLS="80"></TEXTAREA></P><P>The <TT>Card</TT> base class defines a member function <TT>is_expired</TT> which always returns <TT>false</TT>.This method is appropriate for the ID card and the phone card because those cards don't expire. But it is not appropriatefor the driver's license. Supply a member function <TT>DriverLicense::is_expired()</TT> that gets the current timeand checks if the driver's license is already expired.</P><P><TEXTAREA NAME="CCC_CH13_P3f" ROWS="20" COLS="80">/* paste code here */</TEXTAREA></P><P>Note that you should not redefine <TT>is_expired</TT> for the other card types. They simply <I>inherit</I> thebase class function.</P><P>Add a member function <TT>print_expired_cards</TT> to the <TT>Billfold</TT> which queries each card whetherit is expired and only prints those that are expired.</P><P><TEXTAREA NAME="CCC_CH13_P3g" ROWS="20" COLS="80">/* paste code here */</TEXTAREA></P><P>Write a <TT>main</TT> program that populates a billfold with an ID card, a phone card and an expired driverlicense. Then call the <TT>print_expired_cards</TT> function.</P><P><TEXTAREA NAME="CCC_CH13_P3h" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P>Show the output of your test run.</P><P><TEXTAREA NAME="CCC_CH13_P3i" ROWS="10" COLS="80">/* paste output here */</TEXTAREA> <HR ALIGN="CENTER"></P><P>Don't forget to <A HREF="#submit">send your answers</A> when you're finished.</FORM></BODY></HTML>