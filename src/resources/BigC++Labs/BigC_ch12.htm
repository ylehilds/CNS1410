<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><HTML><HEAD>	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows">	<TITLE>Big C++ Lab - Chapter 12 Streams</TITLE></HEAD><BODY><FORM ACTION="CCC_CH10_LAB.HTML" METHOD="POST" ENCTYPE="application/x-www-form-urlencoded"><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>    Chapter 12 - Streams </strong></font> </p><P><HR ALIGN="CENTER"><TABLE BORDER="0">	<TR>		<TD>Your name:</TD>		<TD><INPUT TYPE="TEXT" NAME="username" SIZE="20"></TD>	</TR>	<TR>		<TD>Your email address:</TD>		<TD><INPUT TYPE="TEXT" NAME="recipientaddr" SIZE="20"></TD>	</TR>	<TR>		<TD>Your student ID number:</TD>		<TD><INPUT TYPE="TEXT" NAME="ID" SIZE="20"></TD>	</TR></TABLE><INPUT TYPE="HIDDEN" NAME="useraddr" SIZE="-1" VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN" NAME="recipientname"SIZE="-1" VALUE="yourself since this form has not been customized for your institution"> <INPUT TYPE="HIDDEN" NAME="subject"SIZE="-1" VALUE="CCC Lab12"></P><P><A NAME="#submit"></A>Once this form has been customized for your institution, you can use this button <INPUTTYPE="SUBMIT" VALUE="Send lab"> to send your lab work. Be sure to read the <A HREF="instructions.html">instructions</A>before starting your work.</P><P><HR ALIGN="CENTER"><H4>Lab Objectives</H4><P>To gain experience with</P><UL>	<LI>reading and writing files	<LI>converting between strings and numbers using string streams	<LI>the command line	<LI>the concepts of sequential and random access	<LI>building simple random-access database files</UL><P><HR ALIGN="CENTER"><H3>P1. Reading Text Files</H3><P>You already know how to read data from a file and write data to a file, by using the system variables <TT>cin</TT>and <TT>cout</TT> together with command-line redirection (<TT>myprog &lt;input.txt &gt;output.txt</TT>).</P><P>However, this approach is limited. You need to learn to use files directly in your program in the followingsituations:</P><UL>	<LI>to read input from more than one file	<LI>to read and update a single file	<LI>to prompt the user for the name of a file	<LI>to write programs that don't support <TT>cin</TT> and <TT>cout</TT> (e.g. CCC graphics programs)</UL><P>In these situations, you need files. C++ supports three file types, <TT>fstream</TT>, <TT>ifstream</TT> and<TT>ofstream</TT>. The latter two are used to open files for input or output only. Since <TT>fstream</TT> can beused for both reading and writing, we will not cover those other file classes in this course.</P><P>To open a file, first define an object of type <TT>fstream</TT> and then call the <TT>open</TT> member function.</P><PRE>ofstream my_data;  my_data.open(&quot;output.txt&quot;);   </PRE><P>Next, you should check that the file was opened successfully:</P><PRE>if (my_data.fail())   cout &lt;&lt; &quot;Unable to open output.txt&quot;;</PRE><P>Then you can read and write with the same commands that you used with <TT>cin</TT> and <TT>cout</TT>, such as<TT>&lt;&lt; &gt;&gt; getline</TT> etc.</P><P>Write a program which compares the contents of two files. Have your program display the line number and textof the first pair of lines that differ.</P><P>First, prompt the user for the names of the two files. Then open each file. Remember to check for failure. Keepreading a line from each of them. Increment a line number counter. If both inputs fail, print a message indicatingthat both files are identical. If one of the inputs fails and the other does not, print a message indicating whichfile is shorter, then exit. If the two input lines are different, print the line number counter and both inputlines, then exit. If the two input lines are identical, keep on reading.</P><P><TEXTAREA NAME="CCC_CH10_P1a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P2. Reading Input Data in a Graphics Program</H3><P>Consider a graphics program that prompts the user to define shapes by selecting menu options and clicking ona window. When the user is done, the user's work should be stored in a file so that the user can retrieve it later.Graphics can be stored in a variety of formats. Choosing the best format for a particular purpose involves factorssuch as speed, portability to different platforms and programs, and the storage space and transmission requirements.In this lab exercise, we will use a simple text file containing lines of the form:</P><PRE>Circle 1 3 5.0Circle -4 3 5.0</PRE><P>That is, a circle is specified by the x- and y-coordinates of its center, followed by it's radius.</P><P>When the program starts, all saved data are read in automatically from the file <TT>saved.dat</TT>. When theuser adds more circles, then the new circles are appended to that file.</P><PRE>void read_shapes(ifstream&amp; shape_file)/* PURPOSE:  Read shapes from a file and display them   RECEIVES: shape_file - the file containing the shape descriptions*/{  /* your work here */}void add_circle(ifstream&amp; shape_file, Circle c)/* PURPOSE:  Add a circle shape to a file   RECEIVES: shape_file - the file containing the shape descriptions             c - the circle to add*/{  /* your work here */  }int main(){  ifstream shapes(&quot;saved.dat&quot;);   while (true)   {  if (cwin.get_string(&quot;More circles? (y/n)&quot;)) != &quot;y&quot;)       {  return 0;         shapes.close();      }      Point center = cwin.get_mouse(&quot;Center: &quot;);      double radius = cwin.get_double(&quot;Radius: &quot;);	     Circle c(center, radius);      cwin &lt;&lt; c;      add_circle(c);   }}</PRE><P>Note: The next time the user starts, the newly added circles are automatically displayed.</P><P>Consider the <TT>read_shapes</TT> and <TT>add_circle</TT> functions. Both have <TT>fstream</TT> as a <I>reference</I>parameter. Of course, <TT>add_circle</TT> adds new data to the file. But <TT>read_shapes</TT> doesn't change thecontents of the file on disk. Why is it nevertheless necessary to pass the <TT>fstream</TT> object by reference?</P><P><TEXTAREA NAME="CCC_CH10_P2a" ROWS="10" COLS="80"></TEXTAREA></P><P>Now implement the circle drawing program. Extra credit if you enhance it to handle both circles and lines!</P><H3><TEXTAREA NAME="CCC_CH10_P2b" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER">P3. String Streams</H3><P>The istringstream class reads allows us to read characters from a string and the ostringstream class allowsus to write characters to a string using the same interface as other stream classes. Thus, we can use the istringstreamand ostringstream classes to separate strings, convert strings to numbers and convert numbers to strings. Writea program using the istringstream and ostringstream classes to read input from the user one line at a time andcount the occurrences of the following words:</P><P>the<BR>any<BR>all <BR>always<BR>because<BR>exactly<BR>one</P><P>Also, your program should look for numbers and add any numbers found to a sum. When the user is done enteringinformation, your program should display the word count for each of the above words as well as the sum.</P><P><BR><TEXTAREA NAME="CCC_CH10_P2b" ROWS="20" COLS="80">/* paste program here */</TEXTAREA><H3></H3><H3>P4. Command Line Arguments</H3><P>Extend your file comparison program in two ways. First, make it possible to specify the file names on the commandline. Only ask the user for the file names when they are not specified. And support a command line flag to controlthe number of differences identified. That is:</P><PRE>differ -a file1.txt file2.txt          displays <I>all</I> differencesdiffer -<I>n</I>  file1.txt file2.txt   displays the first <I>n</I> differences   For examplediffer -20      displays the first 20 differences and prompts the user for the file names</PRE><P><TEXTAREA NAME="CCC_CH10_P3a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"><H3>P4. Random Access</H3><P>If a file stores records of fixed length, it is easy to locate any one of them. If the records are also in asorted order, for example employee records sorted by name, it is also possible to implement a fast search strategycalled <I>binary search</I>. Rather than having to step through every record, you can eliminate half of the recordsremaining at each stage of the search because they are either too big or too small.</P><P>Consider searching for the name <TT>&quot;Mushroom&quot;</TT> in the following listing.</P><PRE>  Acorn, John         34000  Barley, Lawrence    37500   Corn, Charlie       29000  Flax, Winston       43700  Grape, Priscilla    35800  Kiwi, Rachel        28700-&gt;Lime, Lucy          45400  Melon, Walker       33000  Nasturtium, Ken     57000  Olive, Ollie        29500  Pickle, Jim         32000  Radish, Ruby        32500  Squash, Slim        44700  Turnip, Misha       27500</PRE><P>First, note that there are 14 records. Start in the middle, at record 7, <TT>&quot;Lime&quot;</TT>. Compareit with the search term, <TT>&quot;Mushroom&quot;</TT>. Since <TT>&quot;Mushroom&quot; &gt; &quot;Lime&quot;</TT>,there is no need to look for it in the lines containing <TT>&quot;Acorn&quot;</TT> through <TT>&quot;Lime&quot;</TT>.</P><PRE>  Melon, Walker       33000  Nasturtium, Ken     57000  Olive, Ollie        29500-&gt;Pickle, Jim         32000  Radish, Ruby        32500  Squash, Slim        44700  Turnip, Misha       27500</PRE><P>Go to the middle again. This time the middle among records 8 through 14 is record 11,<TT>&quot;Pickle&quot;</TT>.Similarly, since <TT>&quot;Mushroom&quot; &lt; &quot;Pickle&quot;</TT>, <TT>&quot;Pickle&quot;</TT> through <TT>&quot;Turnip&quot;</TT>can be eliminated from further consideration.</P><P>That leaves only records 8 through 10. The middle record is 9.</P><PRE>  Melon, Walker       33000-&gt;Nasturtium, Ken     57000  Olive, Ollie        29500</PRE><P>That record is larger than <TT>&quot;Mushroom&quot;</TT>, so we are left with records 8 through 8, i.e. a singlerecord.</P><PRE>-&gt;  Melon, Walker       33000</PRE><P>Since this is not a match, we see that the name <TT>Mushroom</TT> is not in the database!</P><P>Here is the pseudocode to locate the value <TT>e</TT>, using binary search.</P><PRE>from = 0; to = index of last record;  while (from &lt;= to){  int mid = (from + to) / 2;   if (value at mid equals e) return mid;   else if (value at mid comes before e)      from = mid + 1;   else      to = mid - 1;}// e not found</PRE><P>Enhance database.cpp from the textbook to prompt for a user input lastname, then search for it using a binarysearch strategy. (Of course, you must use a data file that is <I>sorted</I>).</P><P><TEXTAREA NAME="CCC_CH10_P4a" ROWS="20" COLS="80">/* paste program here */</TEXTAREA> <HR ALIGN="CENTER"></P><P>Don't forget to <A HREF="#submit">send your answers</A> when you're finished.</FORM></BODY></HTML>