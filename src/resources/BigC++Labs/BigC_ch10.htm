<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><HTML><HEAD>	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1"><META http-equiv=Content-Type content="text/html; charset=windows-1252">	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows">	<TITLE>Big C++ Lab - Chapter 10 Pointers</TITLE></HEAD><BODY><FORM ACTION="CCC_CH10_LAB.HTML" METHOD="POST" ENCTYPE="application/x-www-form-urlencoded"><p align="center"><font size="6">BIG C++<br>  </font><font size="4">Cay Horstmann     &amp; Timothy Budd</font> </p>  <p align="center"><font size="4"><strong>Laboratory Notebook<br>    Chapter 10 - Pointers </strong></font> </p><P><HR ALIGN="CENTER"><TABLE BORDER="0"><TBODY>  					<TR>		<TD>Your name:</TD>		<TD><INPUT TYPE="TEXT" NAME="username" SIZE="25"></TD>	</TR>	<TR>		<TD>Your email address:</TD>		<TD><INPUT TYPE="TEXT" NAME="recipientaddr" SIZE="25"></TD>	</TR>	<TR>		<TD>Your student ID number:</TD>		<TD><INPUT TYPE="TEXT" NAME="ID" SIZE="25"></TD>	</TR></TBODY></TABLE><INPUT TYPE="HIDDEN" NAME="useraddr" SIZE="-1" VALUE="instructor@institution.edu"><INPUT TYPE="HIDDEN" NAME="recipientname"SIZE="-1" VALUE="yourself since this form has not been customized for your institution"> <INPUT TYPE="HIDDEN" NAME="subject"SIZE="-1" VALUE="CCC Lab10"></P><P><A NAME="#submit"></A>Once this form has been customized for your institution, you can use this button <INPUTTYPE="SUBMIT" VALUE="Send lab"> to send your lab work. Be sure to read the <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/instructions.html">instructions</A>before starting your work.</P><P><HR ALIGN="CENTER"><H4>Lab Objectives</H4><P>To gain experience with</P><UL>	<LI>learning how to declare, initialize and use pointers	<LI>understanding the relationship between pointers and arrays	<LI>converting between string objects and character pointers</UL><H4><HR ALIGN="CENTER">P1. Pointers</H4><P>Write a program that creates a vector <TT>ring</TT>of pointers to<TT>Circle</TT> objects, that is, a <TT>vector&lt;Circle*&gt;ring;</TT>. Your job is to fill <TT>rings</TT> with five pointers to circles that are configured like the interlockingOlympic rings.</P><P>Initialize the vector by allocating five circles on the heap with <TT>new</TT> and calling <TT>push_back</TT>to append the resulting pointers to the vector.</P><P><TEXTAREA NAME="CCC_CH13_P1a" ROWS="10" COLS="80"></TEXTAREA></P><P>Write a loop that displays all elements in <TT>rings</TT> on the graphics screen</P><P><TEXTAREA NAME="CCC_CH13_P1b" ROWS="10" COLS="80"></TEXTAREA></P><P>Write a loop that deletes all heap objects whose pointers are stored in <TT>rings</TT></P><P><TEXTAREA NAME="CCC_CH13_P1c" ROWS="10" COLS="80"></TEXTAREA></P><P>Combine the code into a <TT>main</TT> program that prints out the Olympic rings.</P><P><TEXTAREA NAME="CCC_CH13_P1d" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P>Note: In this example, there was no advantage to using a <TT>vector&lt;Circle*&gt;</TT>. It would have beeneasier to use a <TT>vector&lt;Circle&gt;</TT>. The purpose of this exercise was to get you used to the pointernotation and dynamic allocation.</P><P>This is a worthwhile exercise since the next lab (on inheritance) uses a <TT>vector&lt;Card*&gt;</TT> to holda vector of cards (such as an ID card, a phone card, and so on). In that lab, it is essential that you use a vectorof pointers--a <TT>vector&lt;Card&gt;</TT> will not be sufficient.</P><H4><HR ALIGN="CENTER">R1. Pointers</H4><P>The following program contains several errors in the way that the pointers are dereferenced. Please correctthe program and paste your corrected version in the textarea below.</P><P><TEXTAREA NAME="CCC_CH13_P1d" ROWS="65" COLS="80">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;class Student{public:   Student();   Student(string student_name, string major_at_acceptance);   void set_major(string new_major);   string get_major() const;   string get_name() const;private:   string name;   string major;};Student::Student(){	name = &quot;&quot;;	major = &quot;&quot;;}Student::Student(string student_name, string major_at_acceptance){	name=student_name;	major=major_at_acceptance;}void Student::set_major(string new_major){	major = new_major;}string Student::get_major() const{ 	return major;}string Student::get_name() const{	return name;}int main(void){	Student* trans_student = new Student(&quot;James Smith&quot;,&quot;Computer Science&quot;);	Student* new_student = new Student();	new_student-&gt;set_major(&quot;Computer Engineering&quot;);	cout &lt;&lt; (*new_student).get_major() &lt;&lt;&quot;\n&quot;;	cout &lt;&lt;&quot;Name: &quot; &lt;&lt;new_student.get_name() &lt;&lt;&quot;\n&quot;;	Student next_student = new Student();	*(next_student.set_name(&quot;Jack Levenworth&quot;));	next_student.set_major(&quot;Computer Science&quot;);	if (next_student-&gt;get_major() == &quot;Computer Engineering&quot;)		cout &lt;&lt;&quot;Another computer engineer!\n&quot;;	return 0;}</TEXTAREA></P><P><BR><TEXTAREA NAME="CCC_CH13_P1d" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><H4><HR ALIGN="CENTER">P2. Uses of Pointers</H4><P>Create a class called Student_Club, which will store information on student clubs. The Student_Club class shouldhave as fields President, Vice-President, Secretary, Treasurer, all of which should be pointers to a student object.In this way, a student could hold offices in many different clubs and we would not have to keep separate informationabout that student in each instance of Student_Club. Your class definition should also include constructors aswell as accessor functions.</P><P><TEXTAREA NAME="CCC_CH13_P1d" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><H4><HR ALIGN="CENTER">R2. Arrays and Pointers</H4><P>Rewrite the following program to use pointers instead of arrays:</P><P><BR><TEXTAREA NAME="CCC_CH13_P1d" ROWS="14" COLS="80">int main(void)	{		int salary[20];		int i;		for (i=0;i&lt;20;++i)		{			cout &lt;&lt;&quot;Enter Salary: &quot;;			cin &gt;&gt;salary[i];		}		for (i=0;i&lt;20;++i)			salary[i]=salary[i]+salary[i]/(i+1);				return 0;	}</TEXTAREA></P><P><TEXTAREA NAME="CCC_CH13_P1d" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><H4><HR ALIGN="CENTER">P3. Arrays and Pointers</H4><P>Using the Student_Club class created in P3, add one additional field, members, which should be an array of pointersto student objects.</P><P><TEXTAREA NAME="CCC_CH13_P1d" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P><HR ALIGN="CENTER"></P><H4>P4. Pointers to Character Strings</H4><P>Write a function Count_Cut(char x[]) that accepts a character string as input, counts the number of charactersand returns the left half.</P><P><TEXTAREA NAME="CCC_CH13_P1d" ROWS="20" COLS="80">/* paste program here */</TEXTAREA></P><P><HR ALIGN="CENTER"></P><H4>R3. Pointers to Character Strings</H4><P>Look at the following examples and write your answer in the column next to the example.</P><P><TABLE BORDER="1" WIDTH="100%">	<TR>		<TD WIDTH="50%">string x = &quot;Kathleen&quot;;<BR>			<BR>			string p=x;<BR>			<BR>			p[0] = &quot;S&quot;;</TD>		<TD WIDTH="50%">after executing:<BR>			<BR>			x = ___________________<BR>			<BR>			p= ___________________</TD>	</TR>	<TR>		<TD WIDTH="50%">string x = &quot;Boston&quot;;<BR>			<BR>			string p = &quot;Massachusetts&quot;;<BR>			<BR>			x[0] = p[0];</TD>		<TD WIDTH="50%">after executing<BR>			<BR>			x = ___________________<BR>			<BR>			p = ___________________</TD>	</TR>	<TR>		<TD WIDTH="50%">char* o = &quot;Henry&quot;;<BR>			<BR>			char* l = o;<BR>			<BR>			o[0] = &quot;D&quot;;</TD>		<TD WIDTH="50%">after executing<BR>			<BR>			l = ____________________<BR>			<BR>			o = ____________________</TD>	</TR>	<TR>		<TD WIDTH="50%">char* o = &quot;The rain in Spain falls mainly on the plain.&quot;<BR>			<BR>			char* p = &quot;Hello, World!&quot;;<BR>			<BR>			o[12]=p[0];<BR>			<BR>			p[7] = o[12];</TD>		<TD WIDTH="50%">after executing<BR>			<BR>			o = ____________________<BR>			<BR>			p = ____________________</TD>	</TR></TABLE><BR>Don't forget to <A HREF="http://wiley.com/college/comp/horstmann318477/CCC2elab/ccc_ch10.html#submit">send youranswers</A> when you're finished.</FORM></BODY></HTML>